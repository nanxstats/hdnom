[{"path":"https://nanx.me/hdnom/CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/.","code":""},{"path":"https://nanx.me/hdnom/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to hdnom","title":"Contributing to hdnom","text":"üëçüéâ First , thanks taking time contribute! üéâüëç contribute project : Filing bug report feature request issue. Suggesting change via pull request.","code":""},{"path":"https://nanx.me/hdnom/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Contributing to hdnom","text":"file issue possible bug, please try include: Relevant package versions Necessary code data reproduce issue","code":""},{"path":"https://nanx.me/hdnom/CONTRIBUTING.html","id":"pull-requests","dir":"","previous_headings":"","what":"Pull Requests","title":"Contributing to hdnom","text":"suggest change via pull requests, please: Fork repository GitHub account. Clone forked repository local machine, make changes. Commit push changes GitHub. Create pull request.","code":""},{"path":"https://nanx.me/hdnom/articles/hdnom.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"An Introduction to hdnom","text":"challenging task model emerging high-dimensional clinical data survival outcomes. simplicity efficiency, penalized Cox models significantly useful accomplishing tasks. hdnom streamlines workflow high-dimensional Cox model building, nomogram plotting, model validation, calibration, comparison.","code":""},{"path":"https://nanx.me/hdnom/articles/hdnom.html","id":"build-survival-models","dir":"Articles","previous_headings":"","what":"Build survival models","title":"An Introduction to hdnom","text":"build penalized Cox model good predictive performance, parameter tuning usually needed. example, elastic-net model requires tune \\(\\ell_1\\)-\\(\\ell_2\\) penalty trade-parameter \\(\\alpha\\), regularization parameter \\(\\lambda\\). free users tedious error-prone parameter tuning process, hdnom provides several functions automatic parameter tuning model selection, including following model types: next, use imputed SMART study data demonstrate complete process model building, nomogram plotting, model validation, calibration, comparison hdnom. Load packages smart dataset: dataset contains 3873 observations corresponding survival outcome (time, event). 27 clinical variables (x) available predictors. See ?smart detailed explanation variables. Fit penalized Cox model adaptive elastic-net regularization fit_aenet() enable parallel parameter tuning: Adaptive elastic-net includes two estimation steps. random seed used parameter tuning, selected best \\(\\alpha\\), selected best \\(\\lambda\\), model fitted estimation step, penalty factor model coefficients second estimation step stored model object fit.","code":"library(\"hdnom\") data(\"smart\") x <- as.matrix(smart[, -c(1, 2)]) time <- smart$TEVENT event <- smart$EVENT y <- survival::Surv(time, event) suppressMessages(library(\"doParallel\")) registerDoParallel(detectCores())  fit <- fit_aenet(x, y, nfolds = 10, rule = \"lambda.1se\", seed = c(5, 7), parallel = TRUE) names(fit) ## [1] \"model\"       \"alpha\"       \"lambda\"      \"model_init\"  \"alpha_init\"  ## [6] \"lambda_init\" \"pen_factor\"  \"type\"        \"seed\"        \"call\""},{"path":"https://nanx.me/hdnom/articles/hdnom.html","id":"nomogram-visualization","dir":"Articles","previous_headings":"","what":"Nomogram visualization","title":"An Introduction to hdnom","text":"plotting nomogram, need extract necessary information model: model object selected hyperparameters: Let‚Äôs generate nomogram object as_nomogram() plot :  According nomogram, adaptive elastic-net model selected 6 variables original set 27 variables, effectively reduced model complexity. Information nomogram , point-linear predictor unit mapping total points-survival probability mapping, can viewed printing nom object directly.","code":"model <- fit$model alpha <- fit$alpha lambda <- fit$lambda adapen <- fit$pen_factor nom <- as_nomogram(   fit, x, time, event,   pred.at = 365 * 2,   funlabel = \"2-Year Overall Survival Probability\" )  plot(nom)"},{"path":"https://nanx.me/hdnom/articles/hdnom.html","id":"model-validation","dir":"Articles","previous_headings":"","what":"Model validation","title":"An Introduction to hdnom","text":"common practice utilize resampling-based methods validate predictive performance penalized Cox model. Bootstrap, \\(k\\)-fold cross-validation, repeated \\(k\\)-fold cross-validation employed methods purpose. hdnom supports internal model validation external model validation. Internal validation takes dataset used build model evaluates predictive performance data internally resampling-based methods, external validation evaluates model‚Äôs predictive performance dataset independent dataset used model building.","code":""},{"path":"https://nanx.me/hdnom/articles/hdnom.html","id":"internal-validation","dir":"Articles","previous_headings":"Model validation","what":"Internal validation","title":"An Introduction to hdnom","text":"validate() allows us assess model performance internally time-dependent AUC (Area ROC Curve) three resampling methods. , validate performance adaptive elastic-net model bootstrap resampling, every half year first year fifth year: mean, median, 25%, 75% quantiles time-dependent AUC time point across bootstrap predictions listed . median mean can considered bias-corrected estimation model performance. also possible plot model validation result:  solid line represents mean AUC, dashed line represents median AUC. darker interval plot shows 25% 75% quantiles AUC, lighter interval shows minimum maximum AUC. seems bootstrap-based validation result stable: median mean value evaluation time point close; 25% 75% quantiles also close median time point. Bootstrap-based validation often gives relatively stable results. Many established nomograms clinical oncology research validated bootstrap methods. \\(K\\)-fold cross-validation provides strict evaluation scheme bootstrap. Repeated cross-validation gives similar results \\(k\\)-fold cross-validation, usually robust. two methods applied machine learning community. Check ?hdnom::validate examples internal model validation.","code":"val_int <- validate(   x, time, event,   model.type = \"aenet\",   alpha = alpha, lambda = lambda, pen.factor = adapen,   method = \"bootstrap\", boot.times = 10,   tauc.type = \"UNO\", tauc.time = seq(1, 5, 0.5) * 365,   seed = 42, trace = FALSE )  print(val_int) #> High-Dimensional Cox Model Validation Object #> Random seed: 42  #> Validation method: bootstrap #> Bootstrap samples: 10  #> Model type: aenet  #> glmnet model alpha: 0.15  #> glmnet model lambda: 0.4322461  #> glmnet model penalty factor: specified #> Time-dependent AUC type: UNO  #> Evaluation time points for tAUC: 365 547.5 730 912.5 1095 1277.5 1460 1642.5 1825 summary(val_int) #> Time-Dependent AUC Summary at Evaluation Time Points #>                365     547.5       730     912.5      1095    1277.5      1460 #> Mean     0.6736908 0.6980663 0.6883938 0.6877201 0.7171392 0.7329408 0.6801665 #> Min      0.6702972 0.6943275 0.6852397 0.6838341 0.7104875 0.7275005 0.6713858 #> 0.25 Qt. 0.6726018 0.6964805 0.6873354 0.6851884 0.7140499 0.7293569 0.6776290 #> Median   0.6740445 0.6983919 0.6879848 0.6884829 0.7163701 0.7321725 0.6799320 #> 0.75 Qt. 0.6749241 0.6996926 0.6896133 0.6896262 0.7210469 0.7371302 0.6825069 #> Max      0.6760826 0.7029078 0.6916850 0.6916987 0.7236970 0.7389818 0.6919914 #>             1642.5      1825 #> Mean     0.6841580 0.6935303 #> Min      0.6770945 0.6800316 #> 0.25 Qt. 0.6821133 0.6924729 #> Median   0.6831368 0.6956285 #> 0.75 Qt. 0.6864527 0.6966638 #> Max      0.6939574 0.6997908 plot(val_int) #>                365     547.5       730     912.5      1095    1277.5      1460 #> Mean     0.6736908 0.6980663 0.6883938 0.6877201 0.7171392 0.7329408 0.6801665 #> Min      0.6702972 0.6943275 0.6852397 0.6838341 0.7104875 0.7275005 0.6713858 #> 0.25 Qt. 0.6726018 0.6964805 0.6873354 0.6851884 0.7140499 0.7293569 0.6776290 #> Median   0.6740445 0.6983919 0.6879848 0.6884829 0.7163701 0.7321725 0.6799320 #> 0.75 Qt. 0.6749241 0.6996926 0.6896133 0.6896262 0.7210469 0.7371302 0.6825069 #> Max      0.6760826 0.7029078 0.6916850 0.6916987 0.7236970 0.7389818 0.6919914 #>             1642.5      1825 #> Mean     0.6841580 0.6935303 #> Min      0.6770945 0.6800316 #> 0.25 Qt. 0.6821133 0.6924729 #> Median   0.6831368 0.6956285 #> 0.75 Qt. 0.6864527 0.6966638 #> Max      0.6939574 0.6997908"},{"path":"https://nanx.me/hdnom/articles/hdnom.html","id":"external-validation","dir":"Articles","previous_headings":"Model validation","what":"External validation","title":"An Introduction to hdnom","text":"Now internally validated model. perform external validation, usually need independent dataset (preferably, collected studies), variables dataset used build model. penalized Cox models, external dataset least variables selected model. demonstration purposes, draw 1000 samples smart data assume form external validation dataset, use validate_external() perform external validation:  time-dependent AUC external dataset shown .","code":"x_new <- as.matrix(smart[, -c(1, 2)])[1001:2000, ] time_new <- smart$TEVENT[1001:2000] event_new <- smart$EVENT[1001:2000]  val_ext <- validate_external(   fit, x, time, event,   x_new, time_new, event_new,   tauc.type = \"UNO\",   tauc.time = seq(0.25, 2, 0.25) * 365 )  print(val_ext) #> High-Dimensional Cox Model External Validation Object #> Model type: aenet  #> Time-dependent AUC type: UNO  #> Evaluation time points for tAUC: 91.25 182.5 273.75 365 456.25 547.5 638.75 730 summary(val_ext) #> Time-Dependent AUC Summary at Evaluation Time Points #>         91.25     182.5    273.75       365    456.25     547.5   638.75 #> AUC 0.4328909 0.5713055 0.6371661 0.6351403 0.6575692 0.6768453 0.683239 #>           730 #> AUC 0.6956754 plot(val_ext) #>         91.25     182.5    273.75       365    456.25     547.5   638.75 #> AUC 0.4328909 0.5713055 0.6371661 0.6351403 0.6575692 0.6768453 0.683239 #>           730 #> AUC 0.6956754"},{"path":"https://nanx.me/hdnom/articles/hdnom.html","id":"model-calibration","dir":"Articles","previous_headings":"","what":"Model calibration","title":"An Introduction to hdnom","text":"Measuring far model predictions actual survival outcomes known calibration. Calibration can assessed plotting predicted probabilities model versus actual survival probabilities. Similar model validation, internal model calibration external model calibration supported hdnom.","code":""},{"path":"https://nanx.me/hdnom/articles/hdnom.html","id":"internal-calibration","dir":"Articles","previous_headings":"Model calibration","what":"Internal calibration","title":"An Introduction to hdnom","text":"calibrate() provides non-resampling resampling methods internal model calibration, including direct fitting, bootstrap resampling, \\(k\\)-fold cross-validation, repeated cross-validation. example, calibrate model internally bootstrap method: split samples three risk groups. practice, number risk groups decided users according needs. model calibration results (median predicted survival probability; median observed survival probability estimated Kaplan-Meier method 95% CI) summarized . Plot calibration result:  practice, may want perform calibration multiple time points separately, put plots together one figure. See ?hdnom::calibrate examples internal model calibration.","code":"cal_int <- calibrate(   x, time, event,   model.type = \"aenet\",   alpha = alpha, lambda = lambda, pen.factor = adapen,   method = \"bootstrap\", boot.times = 10,   pred.at = 365 * 5, ngroup = 3,   seed = 42, trace = FALSE )  print(cal_int) #> High-Dimensional Cox Model Calibration Object #> Random seed: 42  #> Calibration method: bootstrap #> Bootstrap samples: 10  #> Model type: aenet  #> glmnet model alpha: 0.15  #> glmnet model lambda: 0.4322461  #> glmnet model penalty factor: specified #> Calibration time point: 1825  #> Number of groups formed for calibration: 3 summary(cal_int) #>   Calibration Summary Table #>   Predicted  Observed Lower 95% Upper 95% #> 1 0.7937694 0.7556172 0.7275288 0.7847901 #> 2 0.8940039 0.8956157 0.8744876 0.9172544 #> 3 0.9376169 0.9424155 0.9256913 0.9594419 plot(cal_int, xlim = c(0.5, 1), ylim = c(0.5, 1))"},{"path":"https://nanx.me/hdnom/articles/hdnom.html","id":"external-calibration","dir":"Articles","previous_headings":"Model calibration","what":"External calibration","title":"An Introduction to hdnom","text":"perform external calibration external dataset, use calibrate_external():  external calibration results similar interpretations internal calibration results, except fact external calibration performed external dataset.","code":"cal_ext <- calibrate_external(   fit, x, time, event,   x_new, time_new, event_new,   pred.at = 365 * 5, ngroup = 3 )  print(cal_ext) #> High-Dimensional Cox Model External Calibration Object #> Model type: aenet  #> Calibration time point: 1825  #> Number of groups formed for calibration: 3 summary(cal_ext) #>   External Calibration Summary Table #>   Predicted  Observed Lower 95% Upper 95% #> 1 0.7937879 0.7471369 0.6991861 0.7983762 #> 2 0.8917521 0.8727998 0.8363680 0.9108185 #> 3 0.9214463 0.9387588 0.9122184 0.9660715 plot(cal_ext, xlim = c(0.5, 1), ylim = c(0.5, 1))"},{"path":"https://nanx.me/hdnom/articles/hdnom.html","id":"kaplan-meier-analysis-for-risk-groups","dir":"Articles","previous_headings":"Model calibration","what":"Kaplan-Meier analysis for risk groups","title":"An Introduction to hdnom","text":"Internal calibration external calibration classify testing set different risk groups. internal calibration, testing set means samples dataset used build model, external calibration, testing set means samples external dataset. can analyze differences survival time different risk groups Kaplan-Meier survival curves number risk table. example, plot Kaplan-Meier survival curves evaluate number risk one year six years three risk groups, function kmplot():   \\(p\\)-value log-rank test also shown plot.","code":"kmplot(   cal_int,   group.name = c(\"High risk\", \"Medium risk\", \"Low risk\"),   time.at = 1:6 * 365 ) kmplot(   cal_ext,   group.name = c(\"High risk\", \"Medium risk\", \"Low risk\"),   time.at = 1:6 * 365 )"},{"path":"https://nanx.me/hdnom/articles/hdnom.html","id":"log-rank-test-for-risk-groups","dir":"Articles","previous_headings":"Model calibration","what":"Log-rank test for risk groups","title":"An Introduction to hdnom","text":"compare differences survival curves, log-rank test often applied. logrank_test() performs tests internal calibration external calibration results: exact \\(p\\)-values log-rank tests stored cal_int_logrank$pval cal_ext_logrank$pval. \\(p < 0.001\\) indicates significant differences survival curves different risk groups.","code":"cal_int_logrank <- logrank_test(cal_int) cal_int_logrank #> Call: #> survdiff(formula = formula(\"Surv(time, event) ~ grp\")) #>  #> n=3872, 1 observation deleted due to missingness. #>  #>          N Observed Expected (O-E)^2/E (O-E)^2/V #> grp=1 1290      291      156     117.9     178.5 #> grp=2 1291      112      157      12.7      19.4 #> grp=3 1291       56      147      56.1      82.7 #>  #>  Chisq= 187  on 2 degrees of freedom, p= <2e-16 cal_int_logrank$pval #> [1] 2.532113e-41  cal_ext_logrank <- logrank_test(cal_ext) cal_ext_logrank #> Call: #> survdiff(formula = formula(\"Surv(time, event) ~ grp\")) #>  #> n=999, 1 observation deleted due to missingness. #>  #>         N Observed Expected (O-E)^2/E (O-E)^2/V #> grp=1 333       83     45.0     32.14      46.5 #> grp=2 333       40     49.8      1.92       2.9 #> grp=3 333       24     52.3     15.28      23.7 #>  #>  Chisq= 49.5  on 2 degrees of freedom, p= 2e-11 cal_ext_logrank$pval #> [1] 1.761037e-11"},{"path":"https://nanx.me/hdnom/articles/hdnom.html","id":"model-comparison","dir":"Articles","previous_headings":"","what":"Model comparison","title":"An Introduction to hdnom","text":"Given available model types, natural question ask: type model performs best data? questions model type selection can answered built-model comparison functions hdnom.","code":""},{"path":"https://nanx.me/hdnom/articles/hdnom.html","id":"model-comparison-by-validation","dir":"Articles","previous_headings":"Model comparison","what":"Model comparison by validation","title":"An Introduction to hdnom","text":"can compare model performance using time-dependent AUC (internal) model validation approach . example, compare lasso adaptive lasso 5-fold cross-validation:   solid line, dashed line intervals interpretation . comparison, seems substantial difference (AUC difference \\(< 5\\%\\)) lasso adaptive lasso predictive performance, although lasso performs slightly better adaptive lasso first three time points, adaptive lasso performs slightly better lasso last time points. model comparison functions hdnom minimal input design set parameters model type manually. functions try determine best parameter settings automatically model type achieve best performance.","code":"cmp_val <- compare_by_validate(   x, time, event,   model.type = c(\"lasso\", \"alasso\"),   method = \"cv\", nfolds = 5, tauc.type = \"UNO\",   tauc.time = seq(0.25, 2, 0.25) * 365,   seed = 42, trace = FALSE )  print(cmp_val) #> High-Dimensional Cox Model Validation Object #> Random seed: 42  #> Validation method: k-fold cross-validation #> Cross-validation folds: 5  #> Model type: lasso  #> glmnet model alpha: 1  #> glmnet model lambda: 0.01117274  #> glmnet model penalty factor: not specified #> Time-dependent AUC type: UNO  #> Evaluation time points for tAUC: 91.25 182.5 273.75 365 456.25 547.5 638.75 730 #>  #> High-Dimensional Cox Model Validation Object #> Random seed: 42  #> Validation method: k-fold cross-validation #> Cross-validation folds: 5  #> Model type: alasso  #> glmnet model alpha: 1  #> glmnet model lambda: 0.04226386  #> glmnet model penalty factor: specified #> Time-dependent AUC type: UNO  #> Evaluation time points for tAUC: 91.25 182.5 273.75 365 456.25 547.5 638.75 730 summary(cmp_val) #> Model type: lasso  #>              91.25     182.5    273.75       365    456.25     547.5    638.75 #> Mean     0.4862766 0.6235047 0.6554862 0.6645661 0.6709065 0.6905955 0.6859931 #> Min      0.2039134 0.5628978 0.6125746 0.6259622 0.6288554 0.6480062 0.6258751 #> 0.25 Qt. 0.4868413 0.6095040 0.6296803 0.6518906 0.6636125 0.6740643 0.6677914 #> Median   0.5470612 0.6207525 0.6669674 0.6753767 0.6780298 0.6956816 0.7034205 #> 0.75 Qt. 0.5840546 0.6536918 0.6724515 0.6765498 0.6818180 0.6959422 0.7126816 #> Max      0.6095124 0.6706775 0.6957573 0.6930510 0.7022166 0.7392832 0.7201967 #>                730 #> Mean     0.6789647 #> Min      0.6251706 #> 0.25 Qt. 0.6258098 #> Median   0.6935016 #> 0.75 Qt. 0.7180132 #> Max      0.7323283 #>              91.25     182.5    273.75       365    456.25     547.5    638.75 #> Mean     0.4862766 0.6235047 0.6554862 0.6645661 0.6709065 0.6905955 0.6859931 #> Min      0.2039134 0.5628978 0.6125746 0.6259622 0.6288554 0.6480062 0.6258751 #> 0.25 Qt. 0.4868413 0.6095040 0.6296803 0.6518906 0.6636125 0.6740643 0.6677914 #> Median   0.5470612 0.6207525 0.6669674 0.6753767 0.6780298 0.6956816 0.7034205 #> 0.75 Qt. 0.5840546 0.6536918 0.6724515 0.6765498 0.6818180 0.6959422 0.7126816 #> Max      0.6095124 0.6706775 0.6957573 0.6930510 0.7022166 0.7392832 0.7201967 #>                730 #> Mean     0.6789647 #> Min      0.6251706 #> 0.25 Qt. 0.6258098 #> Median   0.6935016 #> 0.75 Qt. 0.7180132 #> Max      0.7323283 #>  #> Model type: alasso  #>              91.25     182.5    273.75       365    456.25     547.5    638.75 #> Mean     0.4814586 0.6106500 0.6475280 0.6612647 0.6675871 0.6834418 0.6813224 #> Min      0.2479919 0.5538453 0.6009056 0.6208453 0.6310650 0.6504086 0.6354844 #> 0.25 Qt. 0.4747967 0.5918396 0.6394882 0.6539436 0.6509640 0.6548892 0.6608927 #> Median   0.5320552 0.6000809 0.6534756 0.6651832 0.6601551 0.6643520 0.6634682 #> 0.75 Qt. 0.5755143 0.6290886 0.6546811 0.6665424 0.6841356 0.6999959 0.7108894 #> Max      0.5769350 0.6783959 0.6890896 0.6998091 0.7116160 0.7475634 0.7358773 #>                730 #> Mean     0.6774869 #> Min      0.6340813 #> 0.25 Qt. 0.6386258 #> Median   0.6791506 #> 0.75 Qt. 0.6995719 #> Max      0.7360047 #>              91.25     182.5    273.75       365    456.25     547.5    638.75 #> Mean     0.4814586 0.6106500 0.6475280 0.6612647 0.6675871 0.6834418 0.6813224 #> Min      0.2479919 0.5538453 0.6009056 0.6208453 0.6310650 0.6504086 0.6354844 #> 0.25 Qt. 0.4747967 0.5918396 0.6394882 0.6539436 0.6509640 0.6548892 0.6608927 #> Median   0.5320552 0.6000809 0.6534756 0.6651832 0.6601551 0.6643520 0.6634682 #> 0.75 Qt. 0.5755143 0.6290886 0.6546811 0.6665424 0.6841356 0.6999959 0.7108894 #> Max      0.5769350 0.6783959 0.6890896 0.6998091 0.7116160 0.7475634 0.7358773 #>                730 #> Mean     0.6774869 #> Min      0.6340813 #> 0.25 Qt. 0.6386258 #> Median   0.6791506 #> 0.75 Qt. 0.6995719 #> Max      0.7360047 plot(cmp_val) #>              91.25     182.5    273.75       365    456.25     547.5    638.75 #> Mean     0.4862766 0.6235047 0.6554862 0.6645661 0.6709065 0.6905955 0.6859931 #> Min      0.2039134 0.5628978 0.6125746 0.6259622 0.6288554 0.6480062 0.6258751 #> 0.25 Qt. 0.4868413 0.6095040 0.6296803 0.6518906 0.6636125 0.6740643 0.6677914 #> Median   0.5470612 0.6207525 0.6669674 0.6753767 0.6780298 0.6956816 0.7034205 #> 0.75 Qt. 0.5840546 0.6536918 0.6724515 0.6765498 0.6818180 0.6959422 0.7126816 #> Max      0.6095124 0.6706775 0.6957573 0.6930510 0.7022166 0.7392832 0.7201967 #>                730 #> Mean     0.6789647 #> Min      0.6251706 #> 0.25 Qt. 0.6258098 #> Median   0.6935016 #> 0.75 Qt. 0.7180132 #> Max      0.7323283 #>              91.25     182.5    273.75       365    456.25     547.5    638.75 #> Mean     0.4814586 0.6106500 0.6475280 0.6612647 0.6675871 0.6834418 0.6813224 #> Min      0.2479919 0.5538453 0.6009056 0.6208453 0.6310650 0.6504086 0.6354844 #> 0.25 Qt. 0.4747967 0.5918396 0.6394882 0.6539436 0.6509640 0.6548892 0.6608927 #> Median   0.5320552 0.6000809 0.6534756 0.6651832 0.6601551 0.6643520 0.6634682 #> 0.75 Qt. 0.5755143 0.6290886 0.6546811 0.6665424 0.6841356 0.6999959 0.7108894 #> Max      0.5769350 0.6783959 0.6890896 0.6998091 0.7116160 0.7475634 0.7358773 #>                730 #> Mean     0.6774869 #> Min      0.6340813 #> 0.25 Qt. 0.6386258 #> Median   0.6791506 #> 0.75 Qt. 0.6995719 #> Max      0.7360047 plot(cmp_val, interval = TRUE) #>              91.25     182.5    273.75       365    456.25     547.5    638.75 #> Mean     0.4862766 0.6235047 0.6554862 0.6645661 0.6709065 0.6905955 0.6859931 #> Min      0.2039134 0.5628978 0.6125746 0.6259622 0.6288554 0.6480062 0.6258751 #> 0.25 Qt. 0.4868413 0.6095040 0.6296803 0.6518906 0.6636125 0.6740643 0.6677914 #> Median   0.5470612 0.6207525 0.6669674 0.6753767 0.6780298 0.6956816 0.7034205 #> 0.75 Qt. 0.5840546 0.6536918 0.6724515 0.6765498 0.6818180 0.6959422 0.7126816 #> Max      0.6095124 0.6706775 0.6957573 0.6930510 0.7022166 0.7392832 0.7201967 #>                730 #> Mean     0.6789647 #> Min      0.6251706 #> 0.25 Qt. 0.6258098 #> Median   0.6935016 #> 0.75 Qt. 0.7180132 #> Max      0.7323283 #>              91.25     182.5    273.75       365    456.25     547.5    638.75 #> Mean     0.4814586 0.6106500 0.6475280 0.6612647 0.6675871 0.6834418 0.6813224 #> Min      0.2479919 0.5538453 0.6009056 0.6208453 0.6310650 0.6504086 0.6354844 #> 0.25 Qt. 0.4747967 0.5918396 0.6394882 0.6539436 0.6509640 0.6548892 0.6608927 #> Median   0.5320552 0.6000809 0.6534756 0.6651832 0.6601551 0.6643520 0.6634682 #> 0.75 Qt. 0.5755143 0.6290886 0.6546811 0.6665424 0.6841356 0.6999959 0.7108894 #> Max      0.5769350 0.6783959 0.6890896 0.6998091 0.7116160 0.7475634 0.7358773 #>                730 #> Mean     0.6774869 #> Min      0.6340813 #> 0.25 Qt. 0.6386258 #> Median   0.6791506 #> 0.75 Qt. 0.6995719 #> Max      0.7360047"},{"path":"https://nanx.me/hdnom/articles/hdnom.html","id":"model-comparison-by-calibration","dir":"Articles","previous_headings":"Model comparison","what":"Model comparison by calibration","title":"An Introduction to hdnom","text":"can compare models comparing (internal) model calibration performance. continue example, split samples five risk groups, compare lasso adaptive lasso via calibration:  summary output plot show calibration results model type want compare. Lasso adaptive lasso comparable performance case, since predicted overall survival probabilities close observed survival probabilities similar degree. Adaptive lasso seems slightly stable lasso calibration.","code":"cmp_cal <- compare_by_calibrate(   x, time, event,   model.type = c(\"lasso\", \"alasso\"),   method = \"cv\", nfolds = 5,   pred.at = 365 * 9, ngroup = 5,   seed = 42, trace = FALSE )  print(cmp_cal) #> High-Dimensional Cox Model Calibration Object #> Random seed: 42  #> Calibration method: k-fold cross-validation #> Cross-validation folds: 5  #> Model type: lasso  #> glmnet model alpha: 1  #> glmnet model lambda: 0.01117274  #> glmnet model penalty factor: not specified #> Calibration time point: 3285  #> Number of groups formed for calibration: 5  #>  #> High-Dimensional Cox Model Calibration Object #> Random seed: 42  #> Calibration method: k-fold cross-validation #> Cross-validation folds: 5  #> Model type: alasso  #> glmnet model alpha: 1  #> glmnet model lambda: 0.04226386  #> glmnet model penalty factor: specified #> Calibration time point: 3285  #> Number of groups formed for calibration: 5 summary(cmp_cal) #>   Model type: lasso  #>   Calibration Summary Table #>   Predicted  Observed Lower 95% Upper 95% #> 1 0.5697146 0.4934145 0.4240717 0.5740960 #> 2 0.7049550 0.6934715 0.5838120 0.8237287 #> 3 0.7667393 0.7894857 0.7203442 0.8652637 #> 4 0.8124527 0.8658548 0.7886324 0.9506387 #> 5 0.8571816 0.8858418 0.8476030 0.9258058 #>  #>   Model type: alasso  #>   Calibration Summary Table #>   Predicted  Observed Lower 95% Upper 95% #> 1 0.5477459 0.4881734 0.4120040 0.5784246 #> 2 0.7193159 0.7164990 0.6459081 0.7948047 #> 3 0.7928640 0.8172891 0.7657546 0.8722919 #> 4 0.8368744 0.8430378 0.7511746 0.9461351 #> 5 0.8786381 0.8926692 0.8524805 0.9347526 plot(cmp_cal, xlim = c(0.3, 1), ylim = c(0.3, 1))"},{"path":"https://nanx.me/hdnom/articles/hdnom.html","id":"prediction-on-new-data","dir":"Articles","previous_headings":"","what":"Prediction on new data","title":"An Introduction to hdnom","text":"predict overall survival probability certain time points new samples established models, simply use predict() model objects new data. example, use samples numbered 101 105 smart dataset new samples, predict overall survival probability one year ten years:","code":"predict(fit, x, y, newx = x[101:105, ], pred.at = 1:10 * 365) #>            365       730      1095      1460      1825      2190      2555 #> [1,] 0.9477525 0.9204206 0.8884055 0.8573295 0.8171765 0.7840601 0.7427595 #> [2,] 0.9715008 0.9563035 0.9382349 0.9204068 0.8969238 0.8771525 0.8519471 #> [3,] 0.9786512 0.9672021 0.9535296 0.9399734 0.9220153 0.9068029 0.8872827 #> [4,] 0.8973088 0.8458249 0.7874714 0.7328425 0.6651912 0.6118826 0.5485474 #> [5,] 0.9736465 0.9595694 0.9428104 0.9262503 0.9044000 0.8859696 0.8624274 #>           2920      3285      3650 #> [1,] 0.7043892 0.6542044 0.6542044 #> [2,] 0.8279442 0.7956203 0.7956203 #> [3,] 0.8685571 0.8431207 0.8431207 #> [4,] 0.4928337 0.4245071 0.4245071 #> [5,] 0.8399589 0.8096226 0.8096226"},{"path":"https://nanx.me/hdnom/articles/hdnom.html","id":"customize-color-palette","dir":"Articles","previous_headings":"","what":"Customize color palette","title":"An Introduction to hdnom","text":"hdnom package 4 unique built-color palettes available plots, inspired colors commonly used scientific journals. Users can use col.pal argument select color palette. Possible values argument listed table : default, hdnom use JCO color palette (col.pal = \"JCO\").","code":""},{"path":"https://nanx.me/hdnom/articles/hdnom.html","id":"shiny-app","dir":"Articles","previous_headings":"","what":"Shiny app","title":"An Introduction to hdnom","text":"https://github.com/nanxstats/hdnom-app","code":""},{"path":"https://nanx.me/hdnom/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nan Xiao. Author, maintainer. Qing-Song Xu. Author. Miao-Zhu Li. Author. Frank Harrell. Contributor.            rms author Sergej Potapov. Contributor.            survAUC author Werner Adler. Contributor.            survAUC author Matthias Schmid. Contributor.            survAUC author","code":""},{"path":"https://nanx.me/hdnom/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nan Xiao, Qing-Song Xu, Miao-Zhu Li. (2016). hdnom: Building Nomograms Penalized Cox Models High-Dimensional Survival Data. bioRxiv, 065524.","code":"@Article{,   title = {hdnom: Building Nomograms for Penalized {Cox} Models with High-Dimensional Survival Data},   author = {Nan Xiao and Qing-Song Xu and Miao-Zhu Li},   year = {2016},   journal = {bioRxiv},   publisher = {Cold Spring Harbor Labs Journals},   url = {https://www.biorxiv.org/content/10.1101/065524v1},   eprint = {https://www.biorxiv.org/content/10.1101/065524v1.full.pdf},   doi = {10.1101/065524}, }"},{"path":"https://nanx.me/hdnom/index.html","id":"hdnom-","dir":"","previous_headings":"","what":"Benchmarking and Visualization Toolkit for Penalized Cox Models","title":"Benchmarking and Visualization Toolkit for Penalized Cox Models","text":"hdnom creates nomogram visualizations penalized Cox regression models, support reproducible survival model building, validation, calibration, comparison high-dimensional data.","code":""},{"path":"https://nanx.me/hdnom/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Benchmarking and Visualization Toolkit for Penalized Cox Models","text":"can install hdnom CRAN: try development version GitHub: Browse vignettes get started.","code":"install.packages(\"hdnom\") remotes::install_github(\"nanxstats/hdnom\")"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://nanx.me/hdnom/index.html","id":"shiny-app","dir":"","previous_headings":"","what":"Shiny app","title":"Benchmarking and Visualization Toolkit for Penalized Cox Models","text":"Shiny app: https://github.com/nanxstats/hdnom-app Shiny app maker: https://github.com/nanxstats/hdnom-appmaker","code":""},{"path":"https://nanx.me/hdnom/index.html","id":"contribute","dir":"","previous_headings":"","what":"Contribute","title":"Benchmarking and Visualization Toolkit for Penalized Cox Models","text":"contribute project, please take look Contributing Guidelines first. Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://nanx.me/hdnom/reference/as_nomogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct nomogram ojects for high-dimensional Cox models ‚Äî as_nomogram","title":"Construct nomogram ojects for high-dimensional Cox models ‚Äî as_nomogram","text":"Construct nomograms ojects high-dimensional Cox models","code":""},{"path":"https://nanx.me/hdnom/reference/as_nomogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct nomogram ojects for high-dimensional Cox models ‚Äî as_nomogram","text":"","code":"as_nomogram(   object,   x,   time,   event,   pred.at = NULL,   fun.at = NULL,   funlabel = NULL )"},{"path":"https://nanx.me/hdnom/reference/as_nomogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct nomogram ojects for high-dimensional Cox models ‚Äî as_nomogram","text":"object Model object fitted `hdnom::fit_*()` functions. x Matrix training data used fitting model. time Survival time. Must length number rows x. event Status indicator, normally 0 = alive, 1 = dead. Must length number rows x. pred.Time point plot nomogram prediction axis. fun.Function values label axis. funlabel Label fun axis.","code":""},{"path":"https://nanx.me/hdnom/reference/as_nomogram.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Construct nomogram ojects for high-dimensional Cox models ‚Äî as_nomogram","text":"nomogram visualizes model automatically selected \"optimal\" hyperparameters (e.g. lambda, alpha, gamma).","code":""},{"path":"https://nanx.me/hdnom/reference/as_nomogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct nomogram ojects for high-dimensional Cox models ‚Äî as_nomogram","text":"","code":"data(smart) x <- as.matrix(smart[, -c(1, 2)]) time <- smart$TEVENT event <- smart$EVENT y <- survival::Surv(time, event)  fit <- fit_lasso(x, y, nfolds = 5, rule = \"lambda.1se\", seed = 11)  nom <- as_nomogram(   fit, x, time, event, pred.at = 365 * 2,   funlabel = \"2-Year Overall Survival Probability\" )  print(nom) #> Points per unit of linear predictor: 55.97875  #> Linear predictor units per point   : 0.01786392  #>  #>  #>  AGE Points #>  15   0     #>  20   5     #>  25   9     #>  30  14     #>  35  19     #>  40  23     #>  45  28     #>  50  32     #>  55  37     #>  60  42     #>  65  46     #>  70  51     #>  75  56     #>  80  60     #>  85  65     #>  #>  #>  AAA Points #>  0    0     #>  1   17     #>  #>  #>  STENOSIS Points #>  0        0      #>  1        0      #>  #>  #>  CREAT Points #>     0    0    #>   100    7    #>   200   14    #>   300   21    #>   400   29    #>   500   36    #>   600   43    #>   700   50    #>   800   57    #>   900   64    #>  1000   71    #>  1100   79    #>  1200   86    #>  1300   93    #>  1400  100    #>  #>  #>  IMT Points #>  0.0  0     #>  0.5  8     #>  1.0 15     #>  1.5 23     #>  2.0 30     #>  2.5 38     #>  3.0 46     #>  3.5 53     #>  4.0 61     #>  4.5 69     #>  5.0 76     #>  #>  #>  ALBUMIN Points #>  1        0     #>  2       14     #>  3       29     #>  #>  #>  Total Points 2-Year Overall Survival Probability #>           189                                0.60 #>           168                                0.70 #>           142                                0.80 #>           100                                0.90 #>            60                                0.95 #>  plot(nom)"},{"path":"https://nanx.me/hdnom/reference/calibrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calibrate high-dimensional Cox models ‚Äî calibrate","title":"Calibrate high-dimensional Cox models ‚Äî calibrate","text":"Calibrate high-dimensional Cox models","code":""},{"path":"https://nanx.me/hdnom/reference/calibrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calibrate high-dimensional Cox models ‚Äî calibrate","text":"","code":"calibrate(   x,   time,   event,   model.type = c(\"lasso\", \"alasso\", \"flasso\", \"enet\", \"aenet\", \"mcp\", \"mnet\", \"scad\",     \"snet\"),   alpha,   lambda,   pen.factor = NULL,   gamma,   lambda1,   lambda2,   method = c(\"fitting\", \"bootstrap\", \"cv\", \"repeated.cv\"),   boot.times = NULL,   nfolds = NULL,   rep.times = NULL,   pred.at,   ngroup = 5,   seed = 1001,   trace = TRUE )"},{"path":"https://nanx.me/hdnom/reference/calibrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calibrate high-dimensional Cox models ‚Äî calibrate","text":"x Matrix training data used fitting model; run calibration. time Survival time. Must length number rows x. event Status indicator, normally 0 = alive, 1 = dead. Must length number rows x. model.type Model type calibrate. one \"lasso\", \"alasso\", \"flasso\", \"enet\", \"aenet\", \"mcp\", \"mnet\", \"scad\", \"snet\". alpha Value elastic-net mixing parameter alpha enet, aenet, mnet, snet models. lasso, alasso, mcp, scad models, please set alpha = 1. alpha=1: lasso (l1) penalty; alpha=0: ridge (l2) penalty. Note mnet snet models, alpha can set close 0 0 exactly. lambda Value penalty parameter lambda use model fits resampled data. Cox model built. pen.factor Penalty factors apply coefficient. built adaptive lasso adaptive elastic-net model. gamma Value model parameter gamma MCP/SCAD/Mnet/Snet models. lambda1 Value penalty parameter lambda1 fused lasso model. lambda2 Value penalty parameter lambda2 fused lasso model. method Calibration method. Options including \"fitting\", \"bootstrap\", \"cv\", \"repeated.cv\". boot.times Number repetitions bootstrap. nfolds Number folds cross-validation repeated cross-validation. rep.times Number repeated times repeated cross-validation. pred.Time point calibration take place. ngroup Number groups formed calibration. seed random seed resampling. trace Logical. Output calibration progress . Default TRUE.","code":""},{"path":"https://nanx.me/hdnom/reference/calibrate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calibrate high-dimensional Cox models ‚Äî calibrate","text":"","code":"data(\"smart\") x <- as.matrix(smart[, -c(1, 2)]) time <- smart$TEVENT event <- smart$EVENT y <- survival::Surv(time, event)  # Fit Cox model with lasso penalty fit <- fit_lasso(x, y, nfolds = 5, rule = \"lambda.1se\", seed = 11)  # Model calibration by fitting the original data directly cal.fitting <- calibrate(   x, time, event,   model.type = \"lasso\",   alpha = 1, lambda = fit$lambda,   method = \"fitting\",   pred.at = 365 * 9, ngroup = 5,   seed = 1010 ) #> Start fitting ...  # Model calibration by 5-fold cross-validation cal.cv <- calibrate(   x, time, event,   model.type = \"lasso\",   alpha = 1, lambda = fit$lambda,   method = \"cv\", nfolds = 5,   pred.at = 365 * 9, ngroup = 5,   seed = 1010 ) #> Start fold 1  #> Start fold 2  #> Start fold 3  #> Start fold 4  #> Start fold 5   print(cal.fitting) #> High-Dimensional Cox Model Calibration Object #> Random seed: 1010  #> Calibration method: fitting #> Model type: lasso  #> glmnet model alpha: 1  #> glmnet model lambda: 0.02581047  #> glmnet model penalty factor: not specified #> Calibration time point: 3285  #> Number of groups formed for calibration: 5  summary(cal.fitting) #>   Calibration Summary Table #>   Predicted  Observed Lower 95% Upper 95% #> 1 0.6158701 0.4719854 0.3976380 0.5602336 #> 2 0.7018983 0.6721901 0.5366629 0.8419427 #> 3 0.7426685 0.8123688 0.7649860 0.8626864 #> 4 0.7744025 0.8212207 0.7321243 0.9211598 #> 5 0.8095739 0.8875319 0.8496029 0.9271542 plot(cal.fitting)   print(cal.cv) #> High-Dimensional Cox Model Calibration Object #> Random seed: 1010  #> Calibration method: k-fold cross-validation #> Cross-validation folds: 5  #> Model type: lasso  #> glmnet model alpha: 1  #> glmnet model lambda: 0.02581047  #> glmnet model penalty factor: not specified #> Calibration time point: 3285  #> Number of groups formed for calibration: 5  summary(cal.cv) #>   Calibration Summary Table #>   Predicted  Observed Lower 95% Upper 95% #> 1 0.6153221 0.4935001 0.4218929 0.5772611 #> 2 0.7031538 0.6876453 0.5678162 0.8327626 #> 3 0.7450765 0.7955637 0.7364360 0.8594387 #> 4 0.7757004 0.8274510 0.7484363 0.9148076 #> 5 0.8097056 0.8838732 0.8466946 0.9226844 plot(cal.cv)   # # Test fused lasso, SCAD, and Mnet models # data(smart) # x = as.matrix(smart[, -c(1, 2)])[1:500, ] # time = smart$TEVENT[1:500] # event = smart$EVENT[1:500] # y = survival::Surv(time, event) # # set.seed(1010) # cal.fitting = calibrate( #   x, time, event, model.type = \"flasso\", #   lambda1 = 5, lambda2 = 2, #   method = \"fitting\", #   pred.at = 365 * 9, ngroup = 5, #   seed = 1010) # # cal.boot = calibrate( #   x, time, event, model.type = \"scad\", #   gamma = 3.7, alpha = 1, lambda = 0.03, #   method = \"bootstrap\", boot.times = 10, #   pred.at = 365 * 9, ngroup = 5, #   seed = 1010) # # cal.cv = calibrate( #   x, time, event, model.type = \"mnet\", #   gamma = 3, alpha = 0.3, lambda = 0.03, #   method = \"cv\", nfolds = 5, #   pred.at = 365 * 9, ngroup = 5, #   seed = 1010) # # cal.repcv = calibrate( #   x, time, event, model.type = \"flasso\", #   lambda1 = 5, lambda2 = 2, #   method = \"repeated.cv\", nfolds = 5, rep.times = 3, #   pred.at = 365 * 9, ngroup = 5, #   seed = 1010) # # print(cal.fitting) # summary(cal.fitting) # plot(cal.fitting) # # print(cal.boot) # summary(cal.boot) # plot(cal.boot) # # print(cal.cv) # summary(cal.cv) # plot(cal.cv) # # print(cal.repcv) # summary(cal.repcv) # plot(cal.repcv)"},{"path":"https://nanx.me/hdnom/reference/calibrate_external.html","id":null,"dir":"Reference","previous_headings":"","what":"Externally calibrate high-dimensional Cox models ‚Äî calibrate_external","title":"Externally calibrate high-dimensional Cox models ‚Äî calibrate_external","text":"Externally calibrate high-dimensional Cox models","code":""},{"path":"https://nanx.me/hdnom/reference/calibrate_external.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Externally calibrate high-dimensional Cox models ‚Äî calibrate_external","text":"","code":"calibrate_external(   object,   x,   time,   event,   x_new,   time_new,   event_new,   pred.at,   ngroup = 5 )"},{"path":"https://nanx.me/hdnom/reference/calibrate_external.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Externally calibrate high-dimensional Cox models ‚Äî calibrate_external","text":"object Model object fitted hdnom::fit_*(). x Matrix training data used fitting model. time Survival time training data. Must length number rows x. event Status indicator training data, normally 0 = alive, 1 = dead. Must length number rows x. x_new Matrix predictors external validation data. time_new Survival time external validation data. Must length number rows x_new. event_new Status indicator external validation data, normally 0 = alive, 1 = dead. Must length number rows x_new. pred.Time point external calibration take place. ngroup Number groups formed external calibration.","code":""},{"path":"https://nanx.me/hdnom/reference/calibrate_external.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Externally calibrate high-dimensional Cox models ‚Äî calibrate_external","text":"","code":"library(\"survival\")  # Load imputed SMART data data(smart) # Use the first 1000 samples as training data # (the data used for internal validation) x <- as.matrix(smart[, -c(1, 2)])[1:1000, ] time <- smart$TEVENT[1:1000] event <- smart$EVENT[1:1000]  # Take the next 1000 samples as external calibration data # In practice, usually use data collected in other studies x_new <- as.matrix(smart[, -c(1, 2)])[1001:2000, ] time_new <- smart$TEVENT[1001:2000] event_new <- smart$EVENT[1001:2000]  # Fit Cox model with lasso penalty fit <- fit_lasso(   x, Surv(time, event),   nfolds = 5, rule = \"lambda.1se\", seed = 11 )  # External calibration cal.ext <- calibrate_external(   fit, x, time, event,   x_new, time_new, event_new,   pred.at = 365 * 5, ngroup = 5 )  print(cal.ext) #> High-Dimensional Cox Model External Calibration Object #> Model type: lasso  #> Calibration time point: 1825  #> Number of groups formed for calibration: 5  summary(cal.ext) #>   External Calibration Summary Table #>   Predicted  Observed Lower 95% Upper 95% #> 1 0.7636781 0.6778444 0.6118535 0.7509528 #> 2 0.8292888 0.8558495 0.8064183 0.9083108 #> 3 0.8622023 0.8743564 0.8281000 0.9231966 #> 4 0.8851549 0.9169032 0.8785888 0.9568884 #> 5 0.9084455 0.9429391 0.9085910 0.9785858 plot(cal.ext, xlim = c(0.6, 1), ylim = c(0.6, 1))  # # Test fused lasso, MCP, and Snet models # data(smart) # # Use first 500 samples as training data # # (the data used for internal validation) # x <- as.matrix(smart[, -c(1, 2)])[1:500, ] # time <- smart$TEVENT[1:500] # event <- smart$EVENT[1:500] # # # Take 1000 samples as external validation data. # # In practice, usually use data collected in other studies. # x_new <- as.matrix(smart[, -c(1, 2)])[1001:2000, ] # time_new <- smart$TEVENT[1001:2000] # event_new <- smart$EVENT[1001:2000] # # flassofit <- fit_flasso(x, survival::Surv(time, event), nfolds = 5, seed = 11) # scadfit <- fit_mcp(x, survival::Surv(time, event), nfolds = 5, seed = 11) # mnetfit <- fit_snet(x, survival::Surv(time, event), nfolds = 5, seed = 11) # # cal.ext1 <- calibrate_external( #   flassofit, x, time, event, #   x_new, time_new, event_new, #   pred.at = 365 * 5, ngroup = 5) # # cal.ext2 <- calibrate_external( #   scadfit, x, time, event, #   x_new, time_new, event_new, #   pred.at = 365 * 5, ngroup = 5) # # cal.ext3 <- calibrate_external( #   mnetfit, x, time, event, #   x_new, time_new, event_new, #   pred.at = 365 * 5, ngroup = 5) # # print(cal.ext1) # summary(cal.ext1) # plot(cal.ext1) # # print(cal.ext2) # summary(cal.ext2) # plot(cal.ext2) # # print(cal.ext3) # summary(cal.ext3) # plot(cal.ext3)"},{"path":"https://nanx.me/hdnom/reference/calibrate_external_surv_prob_true.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Kaplan-Meier estimated survival probabilities for external calibration ‚Äî calibrate_external_surv_prob_true","title":"Compute Kaplan-Meier estimated survival probabilities for external calibration ‚Äî calibrate_external_surv_prob_true","text":"Compute Kaplan-Meier estimated survival probabilities external calibration","code":""},{"path":"https://nanx.me/hdnom/reference/calibrate_external_surv_prob_true.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Kaplan-Meier estimated survival probabilities for external calibration ‚Äî calibrate_external_surv_prob_true","text":"","code":"calibrate_external_surv_prob_true(   pred_prob,   grp,   time_new,   event_new,   pred.at,   ngroup )"},{"path":"https://nanx.me/hdnom/reference/calibrate_external_surv_prob_true.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Kaplan-Meier estimated survival probabilities for external calibration ‚Äî calibrate_external_surv_prob_true","text":"list","code":""},{"path":"https://nanx.me/hdnom/reference/calibrate_surv_prob_true.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Kaplan-Meier estimated survival probabilities for calibration ‚Äî calibrate_surv_prob_true","title":"Compute Kaplan-Meier estimated survival probabilities for calibration ‚Äî calibrate_surv_prob_true","text":"Compute Kaplan-Meier estimated survival probabilities calibration","code":""},{"path":"https://nanx.me/hdnom/reference/calibrate_surv_prob_true.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Kaplan-Meier estimated survival probabilities for calibration ‚Äî calibrate_surv_prob_true","text":"","code":"calibrate_surv_prob_true(pred_prob, grp, time, event, pred.at, ngroup)"},{"path":"https://nanx.me/hdnom/reference/calibrate_surv_prob_true.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Kaplan-Meier estimated survival probabilities for calibration ‚Äî calibrate_surv_prob_true","text":"list","code":""},{"path":"https://nanx.me/hdnom/reference/compare_by_calibrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare high-dimensional Cox models by model calibration ‚Äî compare_by_calibrate","title":"Compare high-dimensional Cox models by model calibration ‚Äî compare_by_calibrate","text":"Compare high-dimensional Cox models model calibration","code":""},{"path":"https://nanx.me/hdnom/reference/compare_by_calibrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare high-dimensional Cox models by model calibration ‚Äî compare_by_calibrate","text":"","code":"compare_by_calibrate(   x,   time,   event,   model.type = c(\"lasso\", \"alasso\", \"flasso\", \"enet\", \"aenet\", \"mcp\", \"mnet\", \"scad\",     \"snet\"),   method = c(\"fitting\", \"bootstrap\", \"cv\", \"repeated.cv\"),   boot.times = NULL,   nfolds = NULL,   rep.times = NULL,   pred.at,   ngroup = 5,   seed = 1001,   trace = TRUE )"},{"path":"https://nanx.me/hdnom/reference/compare_by_calibrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare high-dimensional Cox models by model calibration ‚Äî compare_by_calibrate","text":"x Matrix training data used fitting model; run calibration. time Survival time. Must length number rows x. event Status indicator, normally 0 = alive, 1 = dead. Must length number rows x. model.type Model types compare. least two \"lasso\", \"alasso\", \"flasso\", \"enet\", \"aenet\", \"mcp\", \"mnet\", \"scad\", \"snet\". method Calibration method. \"bootstrap\", \"cv\", \"repeated.cv\". boot.times Number repetitions bootstrap. nfolds Number folds cross-validation repeated cross-validation. rep.times Number repeated times repeated cross-validation. pred.Time point calibration take place. ngroup Number groups formed calibration. seed random seed cross-validation fold division. trace Logical. Output calibration progress . Default TRUE.","code":""},{"path":"https://nanx.me/hdnom/reference/compare_by_calibrate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare high-dimensional Cox models by model calibration ‚Äî compare_by_calibrate","text":"","code":"data(smart) x <- as.matrix(smart[, -c(1, 2)]) time <- smart$TEVENT event <- smart$EVENT  # Compare lasso and adaptive lasso by 5-fold cross-validation cmp.cal.cv <- compare_by_calibrate(   x, time, event,   model.type = c(\"lasso\", \"alasso\"),   method = \"fitting\",   pred.at = 365 * 9, ngroup = 5, seed = 1001 ) #> Starting model 1 : lasso  #> Start fitting ... #> Starting model 2 : alasso  #> Start fitting ...  print(cmp.cal.cv) #> High-Dimensional Cox Model Calibration Object #> Random seed: 1001  #> Calibration method: fitting #> Model type: lasso  #> glmnet model alpha: 1  #> glmnet model lambda: 0.01226207  #> glmnet model penalty factor: not specified #> Calibration time point: 3285  #> Number of groups formed for calibration: 5  #>  #> High-Dimensional Cox Model Calibration Object #> Random seed: 1001  #> Calibration method: fitting #> Model type: alasso  #> glmnet model alpha: 1  #> glmnet model lambda: 0.03827431  #> glmnet model penalty factor: specified #> Calibration time point: 3285  #> Number of groups formed for calibration: 5  #>  summary(cmp.cal.cv) #>   Model type: lasso  #>   Calibration Summary Table #>   Predicted  Observed Lower 95% Upper 95% #> 1 0.5721389 0.4704003 0.4008863 0.5519681 #> 2 0.7055872 0.6935569 0.5661697 0.8496059 #> 3 0.7649804 0.8020453 0.7475810 0.8604775 #> 4 0.8085048 0.8355332 0.7474947 0.9339408 #> 5 0.8518968 0.9086230 0.8763437 0.9420912 #>  #>   Model type: alasso  #>   Calibration Summary Table #>   Predicted  Observed Lower 95% Upper 95% #> 1 0.5495367 0.4698499 0.3941648 0.5600675 #> 2 0.7209324 0.7187952 0.6535857 0.7905109 #> 3 0.7933952 0.8360191 0.7855318 0.8897513 #> 4 0.8365830 0.8180967 0.7180537 0.9320781 #> 5 0.8770442 0.9234083 0.8925803 0.9553010 #>  plot(cmp.cal.cv)"},{"path":"https://nanx.me/hdnom/reference/compare_by_validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare high-dimensional Cox models by model validation ‚Äî compare_by_validate","title":"Compare high-dimensional Cox models by model validation ‚Äî compare_by_validate","text":"Compare high-dimensional Cox models model validation","code":""},{"path":"https://nanx.me/hdnom/reference/compare_by_validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare high-dimensional Cox models by model validation ‚Äî compare_by_validate","text":"","code":"compare_by_validate(   x,   time,   event,   model.type = c(\"lasso\", \"alasso\", \"flasso\", \"enet\", \"aenet\", \"mcp\", \"mnet\", \"scad\",     \"snet\"),   method = c(\"bootstrap\", \"cv\", \"repeated.cv\"),   boot.times = NULL,   nfolds = NULL,   rep.times = NULL,   tauc.type = c(\"CD\", \"SZ\", \"UNO\"),   tauc.time,   seed = 1001,   trace = TRUE )"},{"path":"https://nanx.me/hdnom/reference/compare_by_validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare high-dimensional Cox models by model validation ‚Äî compare_by_validate","text":"x Matrix training data used fitting model; run validation. time Survival time. Must length number rows x. event Status indicator, normally 0 = alive, 1 = dead. Must length number rows x. model.type Model types compare. least two \"lasso\", \"alasso\", \"flasso\", \"enet\", \"aenet\", \"mcp\", \"mnet\", \"scad\", \"snet\". method Validation method. \"bootstrap\", \"cv\", \"repeated.cv\". boot.times Number repetitions bootstrap. nfolds Number folds cross-validation repeated cross-validation. rep.times Number repeated times repeated cross-validation. tauc.type Type time-dependent AUC. Including \"CD\" proposed Chambless Diao (2006)., \"SZ\" proposed Song Zhou (2008)., \"UNO\" proposed Uno et al. (2007). tauc.time Numeric vector. Time points evaluate time-dependent AUC. seed random seed cross-validation fold division. trace Logical. Output validation progress . Default TRUE.","code":""},{"path":"https://nanx.me/hdnom/reference/compare_by_validate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compare high-dimensional Cox models by model validation ‚Äî compare_by_validate","text":"Chambless, L. E. G. Diao (2006). Estimation time-dependent area ROC curve long-term risk prediction. Statistics Medicine 25, 3474--3486. Song, X. X.-H. Zhou (2008). semiparametric approach covariate specific ROC curve survival outcome. Statistica Sinica 18, 947--965. Uno, H., T. Cai, L. Tian, L. J. Wei (2007). Evaluating prediction rules t-year survivors censored regression models. Journal American Statistical Association 102, 527--537.","code":""},{"path":"https://nanx.me/hdnom/reference/compare_by_validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare high-dimensional Cox models by model validation ‚Äî compare_by_validate","text":"","code":"data(smart) x <- as.matrix(smart[, -c(1, 2)])[1:1000, ] time <- smart$TEVENT[1:1000] event <- smart$EVENT[1:1000]  # Compare lasso and adaptive lasso by 5-fold cross-validation cmp.val.cv <- compare_by_validate(   x, time, event,   model.type = c(\"lasso\", \"alasso\"),   method = \"cv\", nfolds = 5, tauc.type = \"UNO\",   tauc.time = seq(0.25, 2, 0.25) * 365, seed = 1001 ) #> Starting model 1 : lasso  #> Start fold 1  #> Start fold 2  #> Start fold 3  #> Start fold 4  #> Start fold 5  #> Starting model 2 : alasso  #> Start fold 1  #> Start fold 2  #> Start fold 3  #> Start fold 4  #> Start fold 5   print(cmp.val.cv) #> High-Dimensional Cox Model Validation Object #> Random seed: 1001  #> Validation method: k-fold cross-validation #> Cross-validation folds: 5  #> Model type: lasso  #> glmnet model alpha: 1  #> glmnet model lambda: 0.03893173  #> glmnet model penalty factor: not specified #> Time-dependent AUC type: UNO  #> Evaluation time points for tAUC: 91.25 182.5 273.75 365 456.25 547.5 638.75 730 #>  #> High-Dimensional Cox Model Validation Object #> Random seed: 1001  #> Validation method: k-fold cross-validation #> Cross-validation folds: 5  #> Model type: alasso  #> glmnet model alpha: 1  #> glmnet model lambda: 3.330828  #> glmnet model penalty factor: specified #> Time-dependent AUC type: UNO  #> Evaluation time points for tAUC: 91.25 182.5 273.75 365 456.25 547.5 638.75 730 #>  summary(cmp.val.cv) #> Model type: lasso  #>              91.25     182.5    273.75       365    456.25     547.5    638.75 #> Mean     0.5514232 0.5750925 0.5908706 0.6486018 0.6315953 0.6615158 0.6475695 #> Min      0.1919192 0.3720636 0.4318947 0.5247777 0.4999633 0.5416780 0.5432238 #> 0.25 Qt. 0.4054983 0.4326005 0.5056009 0.5330110 0.5330110 0.5819999 0.5859288 #> Median   0.6362098 0.5369578 0.5155505 0.5450753 0.5461533 0.5949445 0.6091759 #> 0.75 Qt. 0.6742424 0.7018313 0.6757791 0.8073438 0.7434037 0.7520246 0.6958370 #> Max      0.8492462 0.8320093 0.8255278 0.8328010 0.8354450 0.8369321 0.8036820 #>                730 #> Mean     0.6292095 #> Min      0.5569337 #> 0.25 Qt. 0.5915718 #> Median   0.6105764 #> 0.75 Qt. 0.6746757 #> Max      0.7122901 #>              91.25     182.5    273.75       365    456.25     547.5    638.75 #> Mean     0.5514232 0.5750925 0.5908706 0.6486018 0.6315953 0.6615158 0.6475695 #> Min      0.1919192 0.3720636 0.4318947 0.5247777 0.4999633 0.5416780 0.5432238 #> 0.25 Qt. 0.4054983 0.4326005 0.5056009 0.5330110 0.5330110 0.5819999 0.5859288 #> Median   0.6362098 0.5369578 0.5155505 0.5450753 0.5461533 0.5949445 0.6091759 #> 0.75 Qt. 0.6742424 0.7018313 0.6757791 0.8073438 0.7434037 0.7520246 0.6958370 #> Max      0.8492462 0.8320093 0.8255278 0.8328010 0.8354450 0.8369321 0.8036820 #>                730 #> Mean     0.6292095 #> Min      0.5569337 #> 0.25 Qt. 0.5915718 #> Median   0.6105764 #> 0.75 Qt. 0.6746757 #> Max      0.7122901 #>  #> Model type: alasso  #>              91.25     182.5    273.75       365    456.25     547.5    638.75 #> Mean     0.5438734 0.6253119 0.6246102 0.6566693 0.6505558 0.6767926 0.6664697 #> Min      0.1161616 0.4108091 0.5219790 0.5361901 0.5334362 0.5378952 0.5394197 #> 0.25 Qt. 0.3891753 0.5148460 0.5289428 0.5577034 0.5361901 0.6129380 0.6162614 #> Median   0.7121212 0.5690552 0.5697782 0.5913443 0.6003684 0.6309677 0.6296160 #> 0.75 Qt. 0.7286432 0.8005930 0.6859652 0.7864692 0.7680248 0.7872057 0.7359087 #> Max      0.7732657 0.8312563 0.8163858 0.8116394 0.8147596 0.8149562 0.8111427 #>                730 #> Mean     0.6646070 #> Min      0.5620190 #> 0.25 Qt. 0.6241618 #> Median   0.6301660 #> 0.75 Qt. 0.7335408 #> Max      0.7731476 #>              91.25     182.5    273.75       365    456.25     547.5    638.75 #> Mean     0.5438734 0.6253119 0.6246102 0.6566693 0.6505558 0.6767926 0.6664697 #> Min      0.1161616 0.4108091 0.5219790 0.5361901 0.5334362 0.5378952 0.5394197 #> 0.25 Qt. 0.3891753 0.5148460 0.5289428 0.5577034 0.5361901 0.6129380 0.6162614 #> Median   0.7121212 0.5690552 0.5697782 0.5913443 0.6003684 0.6309677 0.6296160 #> 0.75 Qt. 0.7286432 0.8005930 0.6859652 0.7864692 0.7680248 0.7872057 0.7359087 #> Max      0.7732657 0.8312563 0.8163858 0.8116394 0.8147596 0.8149562 0.8111427 #>                730 #> Mean     0.6646070 #> Min      0.5620190 #> 0.25 Qt. 0.6241618 #> Median   0.6301660 #> 0.75 Qt. 0.7335408 #> Max      0.7731476 #>  plot(cmp.val.cv) #>              91.25     182.5    273.75       365    456.25     547.5    638.75 #> Mean     0.5514232 0.5750925 0.5908706 0.6486018 0.6315953 0.6615158 0.6475695 #> Min      0.1919192 0.3720636 0.4318947 0.5247777 0.4999633 0.5416780 0.5432238 #> 0.25 Qt. 0.4054983 0.4326005 0.5056009 0.5330110 0.5330110 0.5819999 0.5859288 #> Median   0.6362098 0.5369578 0.5155505 0.5450753 0.5461533 0.5949445 0.6091759 #> 0.75 Qt. 0.6742424 0.7018313 0.6757791 0.8073438 0.7434037 0.7520246 0.6958370 #> Max      0.8492462 0.8320093 0.8255278 0.8328010 0.8354450 0.8369321 0.8036820 #>                730 #> Mean     0.6292095 #> Min      0.5569337 #> 0.25 Qt. 0.5915718 #> Median   0.6105764 #> 0.75 Qt. 0.6746757 #> Max      0.7122901 #>              91.25     182.5    273.75       365    456.25     547.5    638.75 #> Mean     0.5438734 0.6253119 0.6246102 0.6566693 0.6505558 0.6767926 0.6664697 #> Min      0.1161616 0.4108091 0.5219790 0.5361901 0.5334362 0.5378952 0.5394197 #> 0.25 Qt. 0.3891753 0.5148460 0.5289428 0.5577034 0.5361901 0.6129380 0.6162614 #> Median   0.7121212 0.5690552 0.5697782 0.5913443 0.6003684 0.6309677 0.6296160 #> 0.75 Qt. 0.7286432 0.8005930 0.6859652 0.7864692 0.7680248 0.7872057 0.7359087 #> Max      0.7732657 0.8312563 0.8163858 0.8116394 0.8147596 0.8149562 0.8111427 #>                730 #> Mean     0.6646070 #> Min      0.5620190 #> 0.25 Qt. 0.6241618 #> Median   0.6301660 #> 0.75 Qt. 0.7335408 #> Max      0.7731476  plot(cmp.val.cv, interval = TRUE) #>              91.25     182.5    273.75       365    456.25     547.5    638.75 #> Mean     0.5514232 0.5750925 0.5908706 0.6486018 0.6315953 0.6615158 0.6475695 #> Min      0.1919192 0.3720636 0.4318947 0.5247777 0.4999633 0.5416780 0.5432238 #> 0.25 Qt. 0.4054983 0.4326005 0.5056009 0.5330110 0.5330110 0.5819999 0.5859288 #> Median   0.6362098 0.5369578 0.5155505 0.5450753 0.5461533 0.5949445 0.6091759 #> 0.75 Qt. 0.6742424 0.7018313 0.6757791 0.8073438 0.7434037 0.7520246 0.6958370 #> Max      0.8492462 0.8320093 0.8255278 0.8328010 0.8354450 0.8369321 0.8036820 #>                730 #> Mean     0.6292095 #> Min      0.5569337 #> 0.25 Qt. 0.5915718 #> Median   0.6105764 #> 0.75 Qt. 0.6746757 #> Max      0.7122901 #>              91.25     182.5    273.75       365    456.25     547.5    638.75 #> Mean     0.5438734 0.6253119 0.6246102 0.6566693 0.6505558 0.6767926 0.6664697 #> Min      0.1161616 0.4108091 0.5219790 0.5361901 0.5334362 0.5378952 0.5394197 #> 0.25 Qt. 0.3891753 0.5148460 0.5289428 0.5577034 0.5361901 0.6129380 0.6162614 #> Median   0.7121212 0.5690552 0.5697782 0.5913443 0.6003684 0.6309677 0.6296160 #> 0.75 Qt. 0.7286432 0.8005930 0.6859652 0.7864692 0.7680248 0.7872057 0.7359087 #> Max      0.7732657 0.8312563 0.8163858 0.8116394 0.8147596 0.8149562 0.8111427 #>                730 #> Mean     0.6646070 #> Min      0.5620190 #> 0.25 Qt. 0.6241618 #> Median   0.6301660 #> 0.75 Qt. 0.7335408 #> Max      0.7731476"},{"path":"https://nanx.me/hdnom/reference/fit_aenet.html","id":null,"dir":"Reference","previous_headings":"","what":"Model selection for high-dimensional Cox models with adaptive elastic-net penalty ‚Äî fit_aenet","title":"Model selection for high-dimensional Cox models with adaptive elastic-net penalty ‚Äî fit_aenet","text":"Automatic model selection high-dimensional Cox models adaptive elastic-net penalty, evaluated penalized partial-likelihood.","code":""},{"path":"https://nanx.me/hdnom/reference/fit_aenet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model selection for high-dimensional Cox models with adaptive elastic-net penalty ‚Äî fit_aenet","text":"","code":"fit_aenet(   x,   y,   nfolds = 5L,   alphas = seq(0.05, 0.95, 0.05),   rule = c(\"lambda.min\", \"lambda.1se\"),   seed = c(1001, 1002),   parallel = FALSE )"},{"path":"https://nanx.me/hdnom/reference/fit_aenet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model selection for high-dimensional Cox models with adaptive elastic-net penalty ‚Äî fit_aenet","text":"x Data matrix. y Response matrix made Surv. nfolds Fold numbers cross-validation. alphas Alphas tune cv.glmnet. rule Model selection criterion, \"lambda.min\" \"lambda.1se\". See cv.glmnet details. seed Two random seeds cross-validation fold division two estimation steps. parallel Logical. Enable parallel parameter tuning , default FALSE. enable parallel tuning, load doParallel package run registerDoParallel() number CPU cores calling function.","code":""},{"path":"https://nanx.me/hdnom/reference/fit_aenet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model selection for high-dimensional Cox models with adaptive elastic-net penalty ‚Äî fit_aenet","text":"","code":"data(\"smart\") x <- as.matrix(smart[, -c(1, 2)]) time <- smart$TEVENT event <- smart$EVENT y <- survival::Surv(time, event)  # To enable parallel parameter tuning, first run: # library(\"doParallel\") # registerDoParallel(detectCores()) # then set fit_aenet(..., parallel = TRUE).  fit <- fit_aenet(   x, y,   nfolds = 3, alphas = c(0.3, 0.7),   rule = \"lambda.1se\", seed = c(5, 7) )  nom <- as_nomogram(   fit, x, time, event,   pred.at = 365 * 2,   funlabel = \"2-Year Overall Survival Probability\" )  plot(nom)"},{"path":"https://nanx.me/hdnom/reference/fit_alasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Model selection for high-dimensional Cox models with adaptive lasso penalty ‚Äî fit_alasso","title":"Model selection for high-dimensional Cox models with adaptive lasso penalty ‚Äî fit_alasso","text":"Automatic model selection high-dimensional Cox models adaptive lasso penalty, evaluated penalized partial-likelihood.","code":""},{"path":"https://nanx.me/hdnom/reference/fit_alasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model selection for high-dimensional Cox models with adaptive lasso penalty ‚Äî fit_alasso","text":"","code":"fit_alasso(   x,   y,   nfolds = 5L,   rule = c(\"lambda.min\", \"lambda.1se\"),   seed = c(1001, 1002) )"},{"path":"https://nanx.me/hdnom/reference/fit_alasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model selection for high-dimensional Cox models with adaptive lasso penalty ‚Äî fit_alasso","text":"x Data matrix. y Response matrix made Surv. nfolds Fold numbers cross-validation. rule Model selection criterion, \"lambda.min\" \"lambda.1se\". See cv.glmnet details. seed Two random seeds cross-validation fold division two estimation steps.","code":""},{"path":"https://nanx.me/hdnom/reference/fit_alasso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model selection for high-dimensional Cox models with adaptive lasso penalty ‚Äî fit_alasso","text":"","code":"data(\"smart\") x <- as.matrix(smart[, -c(1, 2)]) time <- smart$TEVENT event <- smart$EVENT y <- survival::Surv(time, event)  fit <- fit_alasso(x, y, nfolds = 3, rule = \"lambda.1se\", seed = c(7, 11))  nom <- as_nomogram(   fit, x, time, event,   pred.at = 365 * 2,   funlabel = \"2-Year Overall Survival Probability\" )  plot(nom)"},{"path":"https://nanx.me/hdnom/reference/fit_enet.html","id":null,"dir":"Reference","previous_headings":"","what":"Model selection for high-dimensional Cox models with elastic-net penalty ‚Äî fit_enet","title":"Model selection for high-dimensional Cox models with elastic-net penalty ‚Äî fit_enet","text":"Automatic model selection high-dimensional Cox models elastic-net penalty, evaluated penalized partial-likelihood.","code":""},{"path":"https://nanx.me/hdnom/reference/fit_enet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model selection for high-dimensional Cox models with elastic-net penalty ‚Äî fit_enet","text":"","code":"fit_enet(   x,   y,   nfolds = 5L,   alphas = seq(0.05, 0.95, 0.05),   rule = c(\"lambda.min\", \"lambda.1se\"),   seed = 1001,   parallel = FALSE )"},{"path":"https://nanx.me/hdnom/reference/fit_enet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model selection for high-dimensional Cox models with elastic-net penalty ‚Äî fit_enet","text":"x Data matrix. y Response matrix made Surv. nfolds Fold numbers cross-validation. alphas Alphas tune cv.glmnet. rule Model selection criterion, \"lambda.min\" \"lambda.1se\". See cv.glmnet details. seed random seed cross-validation fold division. parallel Logical. Enable parallel parameter tuning , default FALSE. enable parallel tuning, load doParallel package run registerDoParallel() number CPU cores calling function.","code":""},{"path":"https://nanx.me/hdnom/reference/fit_enet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model selection for high-dimensional Cox models with elastic-net penalty ‚Äî fit_enet","text":"","code":"data(\"smart\") x <- as.matrix(smart[, -c(1, 2)]) time <- smart$TEVENT event <- smart$EVENT y <- survival::Surv(time, event)  # To enable parallel parameter tuning, first run: # library(\"doParallel\") # registerDoParallel(detectCores()) # then set fit_enet(..., parallel = TRUE).  fit <- fit_enet(   x, y,   nfolds = 3, alphas = c(0.3, 0.7),   rule = \"lambda.1se\", seed = 11 )  nom <- as_nomogram(   fit, x, time, event,   pred.at = 365 * 2,   funlabel = \"2-Year Overall Survival Probability\" )  plot(nom)"},{"path":"https://nanx.me/hdnom/reference/fit_flasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Model selection for high-dimensional Cox models with fused lasso penalty ‚Äî fit_flasso","title":"Model selection for high-dimensional Cox models with fused lasso penalty ‚Äî fit_flasso","text":"Automatic model selection high-dimensional Cox models fused lasso penalty, evaluated cross-validated likelihood.","code":""},{"path":"https://nanx.me/hdnom/reference/fit_flasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model selection for high-dimensional Cox models with fused lasso penalty ‚Äî fit_flasso","text":"","code":"fit_flasso(   x,   y,   nfolds = 5L,   lambda1 = c(0.001, 0.05, 0.5, 1, 5),   lambda2 = c(0.001, 0.01, 0.5),   maxiter = 25,   epsilon = 0.001,   seed = 1001,   trace = FALSE,   parallel = FALSE,   ... )"},{"path":"https://nanx.me/hdnom/reference/fit_flasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model selection for high-dimensional Cox models with fused lasso penalty ‚Äî fit_flasso","text":"x Data matrix. y Response matrix made Surv. nfolds Fold numbers cross-validation. lambda1 Vector lambda1 candidates. Default 0.001, 0.05, 0.5, 1, 5. lambda2 Vector lambda2 candidates. Default 0.001, 0.01, 0.5. maxiter maximum number iterations allowed. Default 25. epsilon convergence criterion. Default 1e-3. seed random seed cross-validation fold division. trace Output cross-validation parameter tuning progress . Default FALSE. parallel Logical. Enable parallel parameter tuning , default FALSE. enable parallel tuning, load doParallel package run registerDoParallel() number CPU cores calling function. ... parameters cvl penalized.","code":""},{"path":"https://nanx.me/hdnom/reference/fit_flasso.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Model selection for high-dimensional Cox models with fused lasso penalty ‚Äî fit_flasso","text":"cross-validation procedure used function approximated cross-validation provided penalized package. careful dealing results since might optimistic traditional CV procedure. cross-validation method suitable datasets larger number observations, higher number cross-validation folds.","code":""},{"path":"https://nanx.me/hdnom/reference/fit_flasso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model selection for high-dimensional Cox models with fused lasso penalty ‚Äî fit_flasso","text":"","code":"data(\"smart\") x <- as.matrix(smart[, -c(1, 2)])[1:120, ] time <- smart$TEVENT[1:120] event <- smart$EVENT[1:120] y <- survival::Surv(time, event)  fit <- fit_flasso(   x, y,   lambda1 = c(1, 10), lambda2 = c(0.01),   nfolds = 3, seed = 11 ) #> 123123  nom <- as_nomogram(   fit, x, time, event,   pred.at = 365 * 2,   funlabel = \"2-Year Overall Survival Probability\" )  plot(nom)"},{"path":"https://nanx.me/hdnom/reference/fit_lasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Model selection for high-dimensional Cox models with lasso penalty ‚Äî fit_lasso","title":"Model selection for high-dimensional Cox models with lasso penalty ‚Äî fit_lasso","text":"Automatic model selection high-dimensional Cox models lasso penalty, evaluated penalized partial-likelihood.","code":""},{"path":"https://nanx.me/hdnom/reference/fit_lasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model selection for high-dimensional Cox models with lasso penalty ‚Äî fit_lasso","text":"","code":"fit_lasso(x, y, nfolds = 5L, rule = c(\"lambda.min\", \"lambda.1se\"), seed = 1001)"},{"path":"https://nanx.me/hdnom/reference/fit_lasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model selection for high-dimensional Cox models with lasso penalty ‚Äî fit_lasso","text":"x Data matrix. y Response matrix made Surv. nfolds Fold numbers cross-validation. rule Model selection criterion, \"lambda.min\" \"lambda.1se\". See cv.glmnet details. seed random seed cross-validation fold division.","code":""},{"path":"https://nanx.me/hdnom/reference/fit_lasso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model selection for high-dimensional Cox models with lasso penalty ‚Äî fit_lasso","text":"","code":"data(\"smart\") x <- as.matrix(smart[, -c(1, 2)]) time <- smart$TEVENT event <- smart$EVENT y <- survival::Surv(time, event)  fit <- fit_lasso(x, y, nfolds = 5, rule = \"lambda.1se\", seed = 11)  nom <- as_nomogram(   fit, x, time, event,   pred.at = 365 * 2,   funlabel = \"2-Year Overall Survival Probability\" )  plot(nom)"},{"path":"https://nanx.me/hdnom/reference/fit_mcp.html","id":null,"dir":"Reference","previous_headings":"","what":"Model selection for high-dimensional Cox models with MCP penalty ‚Äî fit_mcp","title":"Model selection for high-dimensional Cox models with MCP penalty ‚Äî fit_mcp","text":"Automatic model selection high-dimensional Cox models MCP penalty, evaluated penalized partial-likelihood.","code":""},{"path":"https://nanx.me/hdnom/reference/fit_mcp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model selection for high-dimensional Cox models with MCP penalty ‚Äî fit_mcp","text":"","code":"fit_mcp(   x,   y,   nfolds = 5L,   gammas = c(1.01, 1.7, 3, 100),   eps = 1e-04,   max.iter = 10000L,   seed = 1001,   trace = FALSE,   parallel = FALSE )"},{"path":"https://nanx.me/hdnom/reference/fit_mcp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model selection for high-dimensional Cox models with MCP penalty ‚Äî fit_mcp","text":"x Data matrix. y Response matrix made Surv. nfolds Fold numbers cross-validation. gammas Gammas tune cv.ncvsurv. eps Convergence threshhold. max.iter Maximum number iterations. seed random seed cross-validation fold division. trace Output cross-validation parameter tuning progress . Default FALSE. parallel Logical. Enable parallel parameter tuning , default FALSE. enable parallel tuning, load doParallel package run registerDoParallel() number CPU cores calling function.","code":""},{"path":"https://nanx.me/hdnom/reference/fit_mcp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model selection for high-dimensional Cox models with MCP penalty ‚Äî fit_mcp","text":"","code":"# \\donttest{ data(\"smart\") x <- as.matrix(smart[, -c(1, 2)]) time <- smart$TEVENT event <- smart$EVENT y <- survival::Surv(time, event)  fit <- fit_mcp(x, y, nfolds = 3, gammas = c(2.1, 3), seed = 1001) #> Warning: ncvsurv() is intended for pathwise optimization, not for single values of lambda. #>   1. You are strongly encouraged to fit a path and extract the solution at the lambda value of interest, rather than use ncvsurv() in this way. #>   2. In particular, if you are using the MCP or SCAD penalties, be aware that you greatly increase your risk of converging to an inferior local maximum if you do not fit an entire path. #>   3. You may wish to look at the ncvfit() function, which is intended for non-path (i.e., single-lambda) optimization and allows the user to supply initial values.  nom <- as_nomogram(   fit, x, time, event,   pred.at = 365 * 2,   funlabel = \"2-Year Overall Survival Probability\" )  plot(nom)  # }"},{"path":"https://nanx.me/hdnom/reference/fit_mnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Model selection for high-dimensional Cox models with Mnet penalty ‚Äî fit_mnet","title":"Model selection for high-dimensional Cox models with Mnet penalty ‚Äî fit_mnet","text":"Automatic model selection high-dimensional Cox models Mnet penalty, evaluated penalized partial-likelihood.","code":""},{"path":"https://nanx.me/hdnom/reference/fit_mnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model selection for high-dimensional Cox models with Mnet penalty ‚Äî fit_mnet","text":"","code":"fit_mnet(   x,   y,   nfolds = 5L,   gammas = c(1.01, 1.7, 3, 100),   alphas = seq(0.05, 0.95, 0.05),   eps = 1e-04,   max.iter = 10000L,   seed = 1001,   trace = FALSE,   parallel = FALSE )"},{"path":"https://nanx.me/hdnom/reference/fit_mnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model selection for high-dimensional Cox models with Mnet penalty ‚Äî fit_mnet","text":"x Data matrix. y Response matrix made Surv. nfolds Fold numbers cross-validation. gammas Gammas tune cv.ncvsurv. alphas Alphas tune cv.ncvsurv. eps Convergence threshhold. max.iter Maximum number iterations. seed random seed cross-validation fold division. trace Output cross-validation parameter tuning progress . Default FALSE. parallel Logical. Enable parallel parameter tuning , default FALSE. enable parallel tuning, load doParallel package run registerDoParallel() number CPU cores calling function.","code":""},{"path":"https://nanx.me/hdnom/reference/fit_mnet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model selection for high-dimensional Cox models with Mnet penalty ‚Äî fit_mnet","text":"","code":"# \\donttest{ data(\"smart\") x <- as.matrix(smart[, -c(1, 2)]) time <- smart$TEVENT event <- smart$EVENT y <- survival::Surv(time, event)  fit <- fit_mnet(   x, y,   nfolds = 3,   gammas = 3, alphas = c(0.3, 0.6, 0.9),   max.iter = 15000, seed = 1010 ) #> Warning: ncvsurv() is intended for pathwise optimization, not for single values of lambda. #>   1. You are strongly encouraged to fit a path and extract the solution at the lambda value of interest, rather than use ncvsurv() in this way. #>   2. In particular, if you are using the MCP or SCAD penalties, be aware that you greatly increase your risk of converging to an inferior local maximum if you do not fit an entire path. #>   3. You may wish to look at the ncvfit() function, which is intended for non-path (i.e., single-lambda) optimization and allows the user to supply initial values.  nom <- as_nomogram(   fit, x, time, event,   pred.at = 365 * 2,   funlabel = \"2-Year Overall Survival Probability\" )  plot(nom)  # }"},{"path":"https://nanx.me/hdnom/reference/fit_scad.html","id":null,"dir":"Reference","previous_headings":"","what":"Model selection for high-dimensional Cox models with SCAD penalty ‚Äî fit_scad","title":"Model selection for high-dimensional Cox models with SCAD penalty ‚Äî fit_scad","text":"Automatic model selection high-dimensional Cox models SCAD penalty, evaluated penalized partial-likelihood.","code":""},{"path":"https://nanx.me/hdnom/reference/fit_scad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model selection for high-dimensional Cox models with SCAD penalty ‚Äî fit_scad","text":"","code":"fit_scad(   x,   y,   nfolds = 5L,   gammas = c(2.01, 2.3, 3.7, 200),   eps = 1e-04,   max.iter = 10000L,   seed = 1001,   trace = FALSE,   parallel = FALSE )"},{"path":"https://nanx.me/hdnom/reference/fit_scad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model selection for high-dimensional Cox models with SCAD penalty ‚Äî fit_scad","text":"x Data matrix. y Response matrix made Surv. nfolds Fold numbers cross-validation. gammas Gammas tune cv.ncvsurv. eps Convergence threshhold. max.iter Maximum number iterations. seed random seed cross-validation fold division. trace Output cross-validation parameter tuning progress . Default FALSE. parallel Logical. Enable parallel parameter tuning , default FALSE. enable parallel tuning, load doParallel package run registerDoParallel() number CPU cores calling function.","code":""},{"path":"https://nanx.me/hdnom/reference/fit_scad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model selection for high-dimensional Cox models with SCAD penalty ‚Äî fit_scad","text":"","code":"# \\donttest{ data(\"smart\") x <- as.matrix(smart[, -c(1, 2)]) time <- smart$TEVENT event <- smart$EVENT y <- survival::Surv(time, event)  fit <- fit_scad(   x, y,   nfolds = 3, gammas = c(3.7, 5),   max.iter = 15000, seed = 1010 ) #> Warning: ncvsurv() is intended for pathwise optimization, not for single values of lambda. #>   1. You are strongly encouraged to fit a path and extract the solution at the lambda value of interest, rather than use ncvsurv() in this way. #>   2. In particular, if you are using the MCP or SCAD penalties, be aware that you greatly increase your risk of converging to an inferior local maximum if you do not fit an entire path. #>   3. You may wish to look at the ncvfit() function, which is intended for non-path (i.e., single-lambda) optimization and allows the user to supply initial values.  nom <- as_nomogram(   fit, x, time, event,   pred.at = 365 * 2,   funlabel = \"2-Year Overall Survival Probability\" )  plot(nom)  # }"},{"path":"https://nanx.me/hdnom/reference/fit_snet.html","id":null,"dir":"Reference","previous_headings":"","what":"Model selection for high-dimensional Cox models with Snet penalty ‚Äî fit_snet","title":"Model selection for high-dimensional Cox models with Snet penalty ‚Äî fit_snet","text":"Automatic model selection high-dimensional Cox models Snet penalty, evaluated penalized partial-likelihood.","code":""},{"path":"https://nanx.me/hdnom/reference/fit_snet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model selection for high-dimensional Cox models with Snet penalty ‚Äî fit_snet","text":"","code":"fit_snet(   x,   y,   nfolds = 5L,   gammas = c(2.01, 2.3, 3.7, 200),   alphas = seq(0.05, 0.95, 0.05),   eps = 1e-04,   max.iter = 10000L,   seed = 1001,   trace = FALSE,   parallel = FALSE )"},{"path":"https://nanx.me/hdnom/reference/fit_snet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model selection for high-dimensional Cox models with Snet penalty ‚Äî fit_snet","text":"x Data matrix. y Response matrix made Surv. nfolds Fold numbers cross-validation. gammas Gammas tune cv.ncvsurv. alphas Alphas tune cv.ncvsurv. eps Convergence threshhold. max.iter Maximum number iterations. seed random seed cross-validation fold division. trace Output cross-validation parameter tuning progress . Default FALSE. parallel Logical. Enable parallel parameter tuning , default FALSE. enable parallel tuning, load doParallel package run registerDoParallel() number CPU cores calling function.","code":""},{"path":"https://nanx.me/hdnom/reference/fit_snet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model selection for high-dimensional Cox models with Snet penalty ‚Äî fit_snet","text":"","code":"# \\donttest{ data(\"smart\") x <- as.matrix(smart[, -c(1, 2)]) time <- smart$TEVENT event <- smart$EVENT y <- survival::Surv(time, event)  fit <- fit_snet(   x, y,   nfolds = 3,   gammas = 3.7, alphas = c(0.3, 0.8),   max.iter = 15000, seed = 1010 ) #> Warning: ncvsurv() is intended for pathwise optimization, not for single values of lambda. #>   1. You are strongly encouraged to fit a path and extract the solution at the lambda value of interest, rather than use ncvsurv() in this way. #>   2. In particular, if you are using the MCP or SCAD penalties, be aware that you greatly increase your risk of converging to an inferior local maximum if you do not fit an entire path. #>   3. You may wish to look at the ncvfit() function, which is intended for non-path (i.e., single-lambda) optimization and allows the user to supply initial values.  nom <- as_nomogram(   fit, x, time, event,   pred.at = 365 * 2,   funlabel = \"2-Year Overall Survival Probability\" )  plot(nom)  # }"},{"path":"https://nanx.me/hdnom/reference/glmnet_basesurv.html","id":null,"dir":"Reference","previous_headings":"","what":"Breslow baseline hazard estimator for glmnet objects ‚Äî glmnet_basesurv","title":"Breslow baseline hazard estimator for glmnet objects ‚Äî glmnet_basesurv","text":"Derived peperr:::basesurv gbm::basehaz.gbm.","code":""},{"path":"https://nanx.me/hdnom/reference/glmnet_basesurv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Breslow baseline hazard estimator for glmnet objects ‚Äî glmnet_basesurv","text":"","code":"glmnet_basesurv(time, event, lp, times.eval = NULL, centered = FALSE)"},{"path":"https://nanx.me/hdnom/reference/glmnet_basesurv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Breslow baseline hazard estimator for glmnet objects ‚Äî glmnet_basesurv","text":"time Survival time event Status indicator lp Linear predictors times.eval Survival time evaluate centered center survival curve? See basehaz details.","code":""},{"path":"https://nanx.me/hdnom/reference/glmnet_basesurv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Breslow baseline hazard estimator for glmnet objects ‚Äî glmnet_basesurv","text":"list containing cumulative base hazard","code":""},{"path":"https://nanx.me/hdnom/reference/glmnet_basesurv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Breslow baseline hazard estimator for glmnet objects ‚Äî glmnet_basesurv","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/glmnet_calibrate_external_surv_prob_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute glmnet predicted survival probabilities for external calibration ‚Äî glmnet_calibrate_external_surv_prob_pred","title":"Compute glmnet predicted survival probabilities for external calibration ‚Äî glmnet_calibrate_external_surv_prob_pred","text":"Compute glmnet predicted survival probabilities external calibration","code":""},{"path":"https://nanx.me/hdnom/reference/glmnet_calibrate_external_surv_prob_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute glmnet predicted survival probabilities for external calibration ‚Äî glmnet_calibrate_external_surv_prob_pred","text":"","code":"glmnet_calibrate_external_surv_prob_pred(object, x_tr, x_te, y_tr, pred.at)"},{"path":"https://nanx.me/hdnom/reference/glmnet_calibrate_external_surv_prob_pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute glmnet predicted survival probabilities for external calibration ‚Äî glmnet_calibrate_external_surv_prob_pred","text":"list containing predicted survival probability","code":""},{"path":"https://nanx.me/hdnom/reference/glmnet_calibrate_surv_prob_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute glmnet predicted survival probabilities for calibration ‚Äî glmnet_calibrate_surv_prob_pred","title":"Compute glmnet predicted survival probabilities for calibration ‚Äî glmnet_calibrate_surv_prob_pred","text":"Compute glmnet predicted survival probabilities calibration","code":""},{"path":"https://nanx.me/hdnom/reference/glmnet_calibrate_surv_prob_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute glmnet predicted survival probabilities for calibration ‚Äî glmnet_calibrate_surv_prob_pred","text":"","code":"glmnet_calibrate_surv_prob_pred(   x_tr,   x_te,   y_tr,   alpha,   lambda,   pen.factor,   pred.at )"},{"path":"https://nanx.me/hdnom/reference/glmnet_calibrate_surv_prob_pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute glmnet predicted survival probabilities for calibration ‚Äî glmnet_calibrate_surv_prob_pred","text":"list containing predicted survival probability","code":""},{"path":"https://nanx.me/hdnom/reference/glmnet_survcurve.html","id":null,"dir":"Reference","previous_headings":"","what":"Survival curve prediction for glmnet objects ‚Äî glmnet_survcurve","title":"Survival curve prediction for glmnet objects ‚Äî glmnet_survcurve","text":"Derived c060::predictProb.coxnet","code":""},{"path":"https://nanx.me/hdnom/reference/glmnet_survcurve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Survival curve prediction for glmnet objects ‚Äî glmnet_survcurve","text":"","code":"glmnet_survcurve(object, time, event, x, survtime)"},{"path":"https://nanx.me/hdnom/reference/glmnet_survcurve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survival curve prediction for glmnet objects ‚Äî glmnet_survcurve","text":"object glmnet model object time Survival time event Status indicator x Predictor matrix survtime Survival time evaluate","code":""},{"path":"https://nanx.me/hdnom/reference/glmnet_survcurve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Survival curve prediction for glmnet objects ‚Äî glmnet_survcurve","text":"list containing predicted survival probabilities linear predictors samples","code":""},{"path":"https://nanx.me/hdnom/reference/glmnet_survcurve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Survival curve prediction for glmnet objects ‚Äî glmnet_survcurve","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/glmnet_tune_alpha.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic alpha tuning function by k-fold cross-validation ‚Äî glmnet_tune_alpha","title":"Automatic alpha tuning function by k-fold cross-validation ‚Äî glmnet_tune_alpha","text":"Automatic alpha tuning function k-fold cross-validation","code":""},{"path":"https://nanx.me/hdnom/reference/glmnet_tune_alpha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic alpha tuning function by k-fold cross-validation ‚Äî glmnet_tune_alpha","text":"","code":"glmnet_tune_alpha(..., alphas, seed, parallel)"},{"path":"https://nanx.me/hdnom/reference/glmnet_tune_alpha.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatic alpha tuning function by k-fold cross-validation ‚Äî glmnet_tune_alpha","text":"best model object best alpha","code":""},{"path":"https://nanx.me/hdnom/reference/glmnet_validate_external_tauc.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute external validation measures for glmnet objects ‚Äî glmnet_validate_external_tauc","title":"Compute external validation measures for glmnet objects ‚Äî glmnet_validate_external_tauc","text":"Compute external validation measures glmnet objects","code":""},{"path":"https://nanx.me/hdnom/reference/glmnet_validate_external_tauc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute external validation measures for glmnet objects ‚Äî glmnet_validate_external_tauc","text":"","code":"glmnet_validate_external_tauc(   object,   x_tr,   x_te,   y_tr,   y_te,   tauc.type,   tauc.time )"},{"path":"https://nanx.me/hdnom/reference/glmnet_validate_external_tauc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute external validation measures for glmnet objects ‚Äî glmnet_validate_external_tauc","text":"time-dependent AUC (tAUC) value","code":""},{"path":"https://nanx.me/hdnom/reference/glmnet_validate_tauc.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute validation measures for glmnet objects ‚Äî glmnet_validate_tauc","title":"Compute validation measures for glmnet objects ‚Äî glmnet_validate_tauc","text":"Compute validation measures glmnet objects","code":""},{"path":"https://nanx.me/hdnom/reference/glmnet_validate_tauc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute validation measures for glmnet objects ‚Äî glmnet_validate_tauc","text":"","code":"glmnet_validate_tauc(   x_tr,   x_te,   y_tr,   y_te,   alpha,   lambda,   pen.factor,   tauc.type,   tauc.time )"},{"path":"https://nanx.me/hdnom/reference/glmnet_validate_tauc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute validation measures for glmnet objects ‚Äî glmnet_validate_tauc","text":"time-dependent AUC (tAUC) value","code":""},{"path":"https://nanx.me/hdnom/reference/hdnom-package.html","id":null,"dir":"Reference","previous_headings":"","what":"hdnom: Benchmarking and Visualization Toolkit for Penalized Cox Models ‚Äî hdnom-package","title":"hdnom: Benchmarking and Visualization Toolkit for Penalized Cox Models ‚Äî hdnom-package","text":"Creates nomogram visualizations penalized Cox regression models, support reproducible survival model building, validation, calibration, comparison high-dimensional data.","code":""},{"path":[]},{"path":"https://nanx.me/hdnom/reference/hdnom-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"hdnom: Benchmarking and Visualization Toolkit for Penalized Cox Models ‚Äî hdnom-package","text":"Maintainer: Nan Xiao @nanx.(ORCID) Authors: Qing-Song Xu qsxu@csu.edu.cn Miao-Zhu Li miaozhu.li@duke.edu contributors: Frank Harrell f.harrell@vanderbilt.edu (rms author) [contributor] Sergej Potapov (survAUC author) [contributor] Werner Adler (survAUC author) [contributor] Matthias Schmid (survAUC author) [contributor]","code":""},{"path":"https://nanx.me/hdnom/reference/infer_variable_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract information of selected variables from high-dimensional Cox models ‚Äî infer_variable_type","title":"Extract information of selected variables from high-dimensional Cox models ‚Äî infer_variable_type","text":"Extract names type selected variables fitted high-dimensional Cox models.","code":""},{"path":"https://nanx.me/hdnom/reference/infer_variable_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract information of selected variables from high-dimensional Cox models ‚Äî infer_variable_type","text":"","code":"infer_variable_type(object, x)"},{"path":"https://nanx.me/hdnom/reference/infer_variable_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract information of selected variables from high-dimensional Cox models ‚Äî infer_variable_type","text":"object Model object. x Data matrix used fit model.","code":""},{"path":"https://nanx.me/hdnom/reference/infer_variable_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract information of selected variables from high-dimensional Cox models ‚Äî infer_variable_type","text":"list containing index, name, type range selected variables.","code":""},{"path":"https://nanx.me/hdnom/reference/infer_variable_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract information of selected variables from high-dimensional Cox models ‚Äî infer_variable_type","text":"","code":"data(\"smart\") x <- as.matrix(smart[, -c(1, 2)]) time <- smart$TEVENT event <- smart$EVENT y <- survival::Surv(time, event)  fit <- fit_lasso(x, y, nfolds = 5, rule = \"lambda.1se\", seed = 11) infer_variable_type(fit, x) #> $index #> [1]  2  6  8 22 23 24 #>  #> $name #> [1] \"AGE\"      \"AAA\"      \"STENOSIS\" \"CREAT\"    \"IMT\"      \"ALBUMIN\"  #>  #> $type #> [1] \"categorical\" \"logical\"     \"logical\"     \"categorical\" \"continuous\"  #> [6] \"categorical\" #>  #> $domain #> $domain[[1]] #> [1] 19 82 #>  #> $domain[[2]] #> [1] 0 1 #>  #> $domain[[3]] #> [1] 0 1 #>  #> $domain[[4]] #> [1]   33 1343 #>  #> $domain[[5]] #> [1] 0.36 4.52 #>  #> $domain[[6]] #> [1] 1 3 #>  #>  #> attr(,\"class\") #> [1] \"hdnom.variable.type\""},{"path":"https://nanx.me/hdnom/reference/kmplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Kaplan-Meier plot with number at risk table for internal calibration and\nexternal calibration results ‚Äî kmplot","title":"Kaplan-Meier plot with number at risk table for internal calibration and\nexternal calibration results ‚Äî kmplot","text":"Kaplan-Meier plot number risk table internal calibration external calibration results","code":""},{"path":"https://nanx.me/hdnom/reference/kmplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kaplan-Meier plot with number at risk table for internal calibration and\nexternal calibration results ‚Äî kmplot","text":"","code":"kmplot(   object,   group.name = NULL,   time.at = NULL,   col.pal = c(\"JCO\", \"Lancet\", \"NPG\", \"AAAS\") )"},{"path":"https://nanx.me/hdnom/reference/kmplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kaplan-Meier plot with number at risk table for internal calibration and\nexternal calibration results ‚Äî kmplot","text":"object object returned calibrate calibrate_external. group.name Risk group labels. Default Group 1, Group 2, ..., Group k. time.Time points evaluate number risk. col.pal Color palette use. Possible values \"JCO\", \"Lancet\", \"NPG\", \"AAAS\". Default \"JCO\".","code":""},{"path":"https://nanx.me/hdnom/reference/kmplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kaplan-Meier plot with number at risk table for internal calibration and\nexternal calibration results ‚Äî kmplot","text":"","code":"data(\"smart\") # Use the first 1000 samples as training data # (the data used for internal validation) x <- as.matrix(smart[, -c(1, 2)])[1:1000, ] time <- smart$TEVENT[1:1000] event <- smart$EVENT[1:1000]  # Take the next 1000 samples as external calibration data # In practice, usually use data collected in other studies x_new <- as.matrix(smart[, -c(1, 2)])[1001:2000, ] time_new <- smart$TEVENT[1001:2000] event_new <- smart$EVENT[1001:2000]  # Fit Cox model with lasso penalty fit <- fit_lasso(x, survival::Surv(time, event), nfolds = 5, rule = \"lambda.1se\", seed = 11)  # Internal calibration cal.int <- calibrate(   x, time, event,   model.type = \"lasso\",   alpha = 1, lambda = fit$lambda,   method = \"cv\", nfolds = 5,   pred.at = 365 * 9, ngroup = 3 ) #> Start fold 1  #> Start fold 2  #> Start fold 3  #> Start fold 4  #> Start fold 5   kmplot(   cal.int,   group.name = c(\"High risk\", \"Medium risk\", \"Low risk\"),   time.at = 1:6 * 365 )   # External calibration cal.ext <- calibrate_external(   fit, x, time, event,   x_new, time_new, event_new,   pred.at = 365 * 5, ngroup = 3 )  kmplot(   cal.ext,   group.name = c(\"High risk\", \"Medium risk\", \"Low risk\"),   time.at = 1:6 * 365 )"},{"path":"https://nanx.me/hdnom/reference/kmplot_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Kaplan-Meier Plot with Number at Risk Table ‚Äî kmplot_raw","title":"Kaplan-Meier Plot with Number at Risk Table ‚Äî kmplot_raw","text":"Kaplan-Meier Plot Number Risk Table","code":""},{"path":"https://nanx.me/hdnom/reference/kmplot_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kaplan-Meier Plot with Number at Risk Table ‚Äî kmplot_raw","text":"","code":"kmplot_raw(   fit,   group.name = NULL,   time.at = NULL,   surv.df = NULL,   col.pal = NULL )"},{"path":"https://nanx.me/hdnom/reference/kmplot_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kaplan-Meier Plot with Number at Risk Table ‚Äî kmplot_raw","text":"fit survfit object group.name Group labels. Default Group 1, Group 2, ... Group k. time.Time points evaluate number risk. surv.df Data frame containing survival time, event risk group log-rank test. col.pal color palette use","code":""},{"path":"https://nanx.me/hdnom/reference/logrank_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-rank test for internal calibration and external calibration results ‚Äî logrank_test","title":"Log-rank test for internal calibration and external calibration results ‚Äî logrank_test","text":"Log-rank test internal calibration external calibration results","code":""},{"path":"https://nanx.me/hdnom/reference/logrank_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-rank test for internal calibration and external calibration results ‚Äî logrank_test","text":"","code":"logrank_test(object)"},{"path":"https://nanx.me/hdnom/reference/logrank_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-rank test for internal calibration and external calibration results ‚Äî logrank_test","text":"object object returned calibrate calibrate_external.","code":""},{"path":"https://nanx.me/hdnom/reference/logrank_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log-rank test for internal calibration and external calibration results ‚Äî logrank_test","text":"","code":"data(\"smart\") # Use the first 1000 samples as training data # (the data used for internal validation) x <- as.matrix(smart[, -c(1, 2)])[1:1000, ] time <- smart$TEVENT[1:1000] event <- smart$EVENT[1:1000]  # Take the next 1000 samples as external calibration data # In practice, usually use data collected in other studies x_new <- as.matrix(smart[, -c(1, 2)])[1001:2000, ] time_new <- smart$TEVENT[1001:2000] event_new <- smart$EVENT[1001:2000]  # Fit Cox model with lasso penalty fit <- fit_lasso(   x, survival::Surv(time, event),   nfolds = 5, rule = \"lambda.1se\", seed = 11 )  # Internal calibration cal.int <- calibrate(   x, time, event,   model.type = \"lasso\",   alpha = 1, lambda = fit$lambda,   method = \"cv\", nfolds = 5,   pred.at = 365 * 9, ngroup = 3 ) #> Start fold 1  #> Start fold 2  #> Start fold 3  #> Start fold 4  #> Start fold 5   logrank_test(cal.int) #> Call: #> survdiff(formula = formula(\"Surv(time, event) ~ grp\")) #>  #> n=999, 1 observation deleted due to missingness. #>  #>         N Observed Expected (O-E)^2/E (O-E)^2/V #> grp=1 333      117     68.2      34.9     50.14 #> grp=2 333       67     77.4       1.4      2.12 #> grp=3 333       42     80.4      18.3     28.52 #>  #>  Chisq= 54.8  on 2 degrees of freedom, p= 1e-12   # External calibration cal.ext <- calibrate_external(   fit, x, time, event,   x_new, time_new, event_new,   pred.at = 365 * 5, ngroup = 3 )  logrank_test(cal.ext) #> Call: #> survdiff(formula = formula(\"Surv(time, event) ~ grp\")) #>  #> n=999, 1 observation deleted due to missingness. #>  #>         N Observed Expected (O-E)^2/E (O-E)^2/V #> grp=1 333       81     45.2     28.45     41.29 #> grp=2 333       39     49.6      2.27      3.44 #> grp=3 333       26     51.2     12.43     19.16 #>  #>  Chisq= 43.2  on 2 degrees of freedom, p= 4e-10"},{"path":"https://nanx.me/hdnom/reference/ncvreg_basesurv.html","id":null,"dir":"Reference","previous_headings":"","what":"Breslow baseline hazard estimator for ncvreg objects ‚Äî ncvreg_basesurv","title":"Breslow baseline hazard estimator for ncvreg objects ‚Äî ncvreg_basesurv","text":"Derived peperr:::basesurv gbm::basehaz.gbm.","code":""},{"path":"https://nanx.me/hdnom/reference/ncvreg_basesurv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Breslow baseline hazard estimator for ncvreg objects ‚Äî ncvreg_basesurv","text":"","code":"ncvreg_basesurv(time, event, lp, times.eval = NULL, centered = FALSE)"},{"path":"https://nanx.me/hdnom/reference/ncvreg_basesurv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Breslow baseline hazard estimator for ncvreg objects ‚Äî ncvreg_basesurv","text":"time Survival time event Status indicator lp Linear predictors times.eval Survival time evaluate centered center survival curve? See basehaz details.","code":""},{"path":"https://nanx.me/hdnom/reference/ncvreg_basesurv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Breslow baseline hazard estimator for ncvreg objects ‚Äî ncvreg_basesurv","text":"list containing cumulative base hazard","code":""},{"path":"https://nanx.me/hdnom/reference/ncvreg_basesurv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Breslow baseline hazard estimator for ncvreg objects ‚Äî ncvreg_basesurv","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/ncvreg_calibrate_external_surv_prob_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute ncvreg predicted survival probabilities for external calibration ‚Äî ncvreg_calibrate_external_surv_prob_pred","title":"Compute ncvreg predicted survival probabilities for external calibration ‚Äî ncvreg_calibrate_external_surv_prob_pred","text":"Compute ncvreg predicted survival probabilities external calibration","code":""},{"path":"https://nanx.me/hdnom/reference/ncvreg_calibrate_external_surv_prob_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute ncvreg predicted survival probabilities for external calibration ‚Äî ncvreg_calibrate_external_surv_prob_pred","text":"","code":"ncvreg_calibrate_external_surv_prob_pred(object, x_tr, x_te, y_tr, pred.at)"},{"path":"https://nanx.me/hdnom/reference/ncvreg_calibrate_external_surv_prob_pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute ncvreg predicted survival probabilities for external calibration ‚Äî ncvreg_calibrate_external_surv_prob_pred","text":"list containing predicted survival probability","code":""},{"path":"https://nanx.me/hdnom/reference/ncvreg_calibrate_surv_prob_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute ncvreg predicted survival probabilities for calibration ‚Äî ncvreg_calibrate_surv_prob_pred","title":"Compute ncvreg predicted survival probabilities for calibration ‚Äî ncvreg_calibrate_surv_prob_pred","text":"Compute ncvreg predicted survival probabilities calibration","code":""},{"path":"https://nanx.me/hdnom/reference/ncvreg_calibrate_surv_prob_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute ncvreg predicted survival probabilities for calibration ‚Äî ncvreg_calibrate_surv_prob_pred","text":"","code":"ncvreg_calibrate_surv_prob_pred(   x_tr,   x_te,   y_tr,   model.type,   alpha,   lambda,   gamma,   pred.at )"},{"path":"https://nanx.me/hdnom/reference/ncvreg_calibrate_surv_prob_pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute ncvreg predicted survival probabilities for calibration ‚Äî ncvreg_calibrate_surv_prob_pred","text":"list containing predicted survival probability","code":""},{"path":"https://nanx.me/hdnom/reference/ncvreg_survcurve.html","id":null,"dir":"Reference","previous_headings":"","what":"Survival curve prediction for ncvreg objects ‚Äî ncvreg_survcurve","title":"Survival curve prediction for ncvreg objects ‚Äî ncvreg_survcurve","text":"Derived c060::predictProb.coxnet","code":""},{"path":"https://nanx.me/hdnom/reference/ncvreg_survcurve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Survival curve prediction for ncvreg objects ‚Äî ncvreg_survcurve","text":"","code":"ncvreg_survcurve(object, time, event, x, survtime)"},{"path":"https://nanx.me/hdnom/reference/ncvreg_survcurve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survival curve prediction for ncvreg objects ‚Äî ncvreg_survcurve","text":"object ncvreg model object time Survival time event Status indicator x Predictor matrix survtime Survival time evaluate","code":""},{"path":"https://nanx.me/hdnom/reference/ncvreg_survcurve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Survival curve prediction for ncvreg objects ‚Äî ncvreg_survcurve","text":"list containing predicted survival probabilities linear predictors samples","code":""},{"path":"https://nanx.me/hdnom/reference/ncvreg_survcurve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Survival curve prediction for ncvreg objects ‚Äî ncvreg_survcurve","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/ncvreg_tune_gamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic MCP/SCAD gamma tuning function by k-fold cross-validation ‚Äî ncvreg_tune_gamma","title":"Automatic MCP/SCAD gamma tuning function by k-fold cross-validation ‚Äî ncvreg_tune_gamma","text":"Automatic MCP/SCAD gamma tuning function k-fold cross-validation","code":""},{"path":"https://nanx.me/hdnom/reference/ncvreg_tune_gamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic MCP/SCAD gamma tuning function by k-fold cross-validation ‚Äî ncvreg_tune_gamma","text":"","code":"ncvreg_tune_gamma(..., gammas, eps, max.iter, seed, parallel)"},{"path":"https://nanx.me/hdnom/reference/ncvreg_tune_gamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatic MCP/SCAD gamma tuning function by k-fold cross-validation ‚Äî ncvreg_tune_gamma","text":"best model object best gamma","code":""},{"path":"https://nanx.me/hdnom/reference/ncvreg_tune_gamma_alpha.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic Mnet/Snet gamma and alpha tuning function by k-fold cross-validation ‚Äî ncvreg_tune_gamma_alpha","title":"Automatic Mnet/Snet gamma and alpha tuning function by k-fold cross-validation ‚Äî ncvreg_tune_gamma_alpha","text":"Automatic Mnet/Snet gamma alpha tuning function k-fold cross-validation","code":""},{"path":"https://nanx.me/hdnom/reference/ncvreg_tune_gamma_alpha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic Mnet/Snet gamma and alpha tuning function by k-fold cross-validation ‚Äî ncvreg_tune_gamma_alpha","text":"","code":"ncvreg_tune_gamma_alpha(..., gammas, alphas, eps, max.iter, seed, parallel)"},{"path":"https://nanx.me/hdnom/reference/ncvreg_tune_gamma_alpha.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatic Mnet/Snet gamma and alpha tuning function by k-fold cross-validation ‚Äî ncvreg_tune_gamma_alpha","text":"best model object, best gamma, best alpha","code":""},{"path":"https://nanx.me/hdnom/reference/ncvreg_validate_external_tauc.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute external validation measures for ncvreg model objects ‚Äî ncvreg_validate_external_tauc","title":"Compute external validation measures for ncvreg model objects ‚Äî ncvreg_validate_external_tauc","text":"Compute external validation measures ncvreg model objects","code":""},{"path":"https://nanx.me/hdnom/reference/ncvreg_validate_external_tauc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute external validation measures for ncvreg model objects ‚Äî ncvreg_validate_external_tauc","text":"","code":"ncvreg_validate_external_tauc(   object,   x_tr,   x_te,   y_tr,   y_te,   tauc.type,   tauc.time )"},{"path":"https://nanx.me/hdnom/reference/ncvreg_validate_external_tauc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute external validation measures for ncvreg model objects ‚Äî ncvreg_validate_external_tauc","text":"time-dependent AUC (tAUC) value","code":""},{"path":"https://nanx.me/hdnom/reference/ncvreg_validate_tauc.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute validation measures for ncvreg model objects ‚Äî ncvreg_validate_tauc","title":"Compute validation measures for ncvreg model objects ‚Äî ncvreg_validate_tauc","text":"Compute validation measures ncvreg model objects","code":""},{"path":"https://nanx.me/hdnom/reference/ncvreg_validate_tauc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute validation measures for ncvreg model objects ‚Äî ncvreg_validate_tauc","text":"","code":"ncvreg_validate_tauc(   x_tr,   x_te,   y_tr,   y_te,   model.type,   gamma,   alpha,   lambda,   tauc.type,   tauc.time )"},{"path":"https://nanx.me/hdnom/reference/ncvreg_validate_tauc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute validation measures for ncvreg model objects ‚Äî ncvreg_validate_tauc","text":"time-dependent AUC (tAUC) value","code":""},{"path":"https://nanx.me/hdnom/reference/palette_aaas.html","id":null,"dir":"Reference","previous_headings":"","what":"Color Palette for AAAS Journals ‚Äî palette_aaas","title":"Color Palette for AAAS Journals ‚Äî palette_aaas","text":"10-color discrete color palette based colors used figures AAAS journals Science.","code":""},{"path":"https://nanx.me/hdnom/reference/palette_aaas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color Palette for AAAS Journals ‚Äî palette_aaas","text":"","code":"palette_aaas()"},{"path":"https://nanx.me/hdnom/reference/palette_jco.html","id":null,"dir":"Reference","previous_headings":"","what":"Color Palette for Journal of Clinical Oncology (JCO) ‚Äî palette_jco","title":"Color Palette for Journal of Clinical Oncology (JCO) ‚Äî palette_jco","text":"10-color discrete color palette based colors used figures Journal Clinical Oncology.","code":""},{"path":"https://nanx.me/hdnom/reference/palette_jco.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color Palette for Journal of Clinical Oncology (JCO) ‚Äî palette_jco","text":"","code":"palette_jco()"},{"path":"https://nanx.me/hdnom/reference/palette_lancet.html","id":null,"dir":"Reference","previous_headings":"","what":"Color Palette for Lancet Journals ‚Äî palette_lancet","title":"Color Palette for Lancet Journals ‚Äî palette_lancet","text":"9-color discrete color palette based colors used figures Lancet Oncology.","code":""},{"path":"https://nanx.me/hdnom/reference/palette_lancet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color Palette for Lancet Journals ‚Äî palette_lancet","text":"","code":"palette_lancet()"},{"path":"https://nanx.me/hdnom/reference/palette_npg.html","id":null,"dir":"Reference","previous_headings":"","what":"Color Palette for NPG Journals ‚Äî palette_npg","title":"Color Palette for NPG Journals ‚Äî palette_npg","text":"10-color discrete color palette based colors used figures NPG journals Nature Reviews Cancer.","code":""},{"path":"https://nanx.me/hdnom/reference/palette_npg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color Palette for NPG Journals ‚Äî palette_npg","text":"","code":"palette_npg()"},{"path":"https://nanx.me/hdnom/reference/penalized_basesurv.html","id":null,"dir":"Reference","previous_headings":"","what":"Breslow baseline hazard estimator for penfit objects ‚Äî penalized_basesurv","title":"Breslow baseline hazard estimator for penfit objects ‚Äî penalized_basesurv","text":"Derived peperr:::basesurv gbm::basehaz.gbm.","code":""},{"path":"https://nanx.me/hdnom/reference/penalized_basesurv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Breslow baseline hazard estimator for penfit objects ‚Äî penalized_basesurv","text":"","code":"penalized_basesurv(time, event, lp, times.eval = NULL, centered = FALSE)"},{"path":"https://nanx.me/hdnom/reference/penalized_basesurv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Breslow baseline hazard estimator for penfit objects ‚Äî penalized_basesurv","text":"time Survival time event Status indicator lp Linear predictors times.eval Survival time evaluate centered center survival curve? See basehaz details.","code":""},{"path":"https://nanx.me/hdnom/reference/penalized_basesurv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Breslow baseline hazard estimator for penfit objects ‚Äî penalized_basesurv","text":"list containing cumulative base hazard","code":""},{"path":"https://nanx.me/hdnom/reference/penalized_basesurv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Breslow baseline hazard estimator for penfit objects ‚Äî penalized_basesurv","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/penalized_calibrate_external_surv_prob_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute penfit predicted survival probabilities for external calibration ‚Äî penalized_calibrate_external_surv_prob_pred","title":"Compute penfit predicted survival probabilities for external calibration ‚Äî penalized_calibrate_external_surv_prob_pred","text":"Compute penfit predicted survival probabilities external calibration","code":""},{"path":"https://nanx.me/hdnom/reference/penalized_calibrate_external_surv_prob_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute penfit predicted survival probabilities for external calibration ‚Äî penalized_calibrate_external_surv_prob_pred","text":"","code":"penalized_calibrate_external_surv_prob_pred(object, x_tr, x_te, y_tr, pred.at)"},{"path":"https://nanx.me/hdnom/reference/penalized_calibrate_external_surv_prob_pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute penfit predicted survival probabilities for external calibration ‚Äî penalized_calibrate_external_surv_prob_pred","text":"list containing predicted survival probability","code":""},{"path":"https://nanx.me/hdnom/reference/penalized_calibrate_surv_prob_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute penfit predicted survival probabilities for calibration ‚Äî penalized_calibrate_surv_prob_pred","title":"Compute penfit predicted survival probabilities for calibration ‚Äî penalized_calibrate_surv_prob_pred","text":"Compute penfit predicted survival probabilities calibration","code":""},{"path":"https://nanx.me/hdnom/reference/penalized_calibrate_surv_prob_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute penfit predicted survival probabilities for calibration ‚Äî penalized_calibrate_surv_prob_pred","text":"","code":"penalized_calibrate_surv_prob_pred(x_tr, x_te, y_tr, lambda1, lambda2, pred.at)"},{"path":"https://nanx.me/hdnom/reference/penalized_calibrate_surv_prob_pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute penfit predicted survival probabilities for calibration ‚Äî penalized_calibrate_surv_prob_pred","text":"list containing predicted survival probability","code":""},{"path":"https://nanx.me/hdnom/reference/penalized_survcurve.html","id":null,"dir":"Reference","previous_headings":"","what":"Survival curve prediction for penfit objects ‚Äî penalized_survcurve","title":"Survival curve prediction for penfit objects ‚Äî penalized_survcurve","text":"Derived c060::predictProb.coxnet","code":""},{"path":"https://nanx.me/hdnom/reference/penalized_survcurve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Survival curve prediction for penfit objects ‚Äî penalized_survcurve","text":"","code":"penalized_survcurve(object, time, event, x, survtime)"},{"path":"https://nanx.me/hdnom/reference/penalized_survcurve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survival curve prediction for penfit objects ‚Äî penalized_survcurve","text":"object penalized model object time Survival time event Status indicator x Predictor matrix survtime Survival time evaluate","code":""},{"path":"https://nanx.me/hdnom/reference/penalized_survcurve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Survival curve prediction for penfit objects ‚Äî penalized_survcurve","text":"list containing predicted survival probabilities linear predictors samples","code":""},{"path":"https://nanx.me/hdnom/reference/penalized_survcurve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Survival curve prediction for penfit objects ‚Äî penalized_survcurve","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/penalized_tune_lambda.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic lambda tuning function for fused lasso by k-fold cross-validation ‚Äî penalized_tune_lambda","title":"Automatic lambda tuning function for fused lasso by k-fold cross-validation ‚Äî penalized_tune_lambda","text":"Automatic lambda tuning function fused lasso k-fold cross-validation","code":""},{"path":"https://nanx.me/hdnom/reference/penalized_tune_lambda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic lambda tuning function for fused lasso by k-fold cross-validation ‚Äî penalized_tune_lambda","text":"","code":"penalized_tune_lambda(..., lambda1, lambda2, seed, trace, parallel)"},{"path":"https://nanx.me/hdnom/reference/penalized_tune_lambda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatic lambda tuning function for fused lasso by k-fold cross-validation ‚Äî penalized_tune_lambda","text":"best model object, best lambda1, best lambda2","code":""},{"path":"https://nanx.me/hdnom/reference/penalized_validate_external_tauc.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute external validation measures for penfit model objects ‚Äî penalized_validate_external_tauc","title":"Compute external validation measures for penfit model objects ‚Äî penalized_validate_external_tauc","text":"Compute external validation measures penfit model objects","code":""},{"path":"https://nanx.me/hdnom/reference/penalized_validate_external_tauc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute external validation measures for penfit model objects ‚Äî penalized_validate_external_tauc","text":"","code":"penalized_validate_external_tauc(   object,   x_tr,   x_te,   y_tr,   y_te,   tauc.type,   tauc.time )"},{"path":"https://nanx.me/hdnom/reference/penalized_validate_external_tauc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute external validation measures for penfit model objects ‚Äî penalized_validate_external_tauc","text":"time-dependent AUC (tAUC) value","code":""},{"path":"https://nanx.me/hdnom/reference/penalized_validate_tauc.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute validation measures for penfit model objects ‚Äî penalized_validate_tauc","title":"Compute validation measures for penfit model objects ‚Äî penalized_validate_tauc","text":"Compute validation measures penfit model objects","code":""},{"path":"https://nanx.me/hdnom/reference/penalized_validate_tauc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute validation measures for penfit model objects ‚Äî penalized_validate_tauc","text":"","code":"penalized_validate_tauc(   x_tr,   x_te,   y_tr,   y_te,   lambda1,   lambda2,   tauc.type,   tauc.time )"},{"path":"https://nanx.me/hdnom/reference/penalized_validate_tauc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute validation measures for penfit model objects ‚Äî penalized_validate_tauc","text":"time-dependent AUC (tAUC) value","code":""},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.calibrate.external.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot external calibration results ‚Äî plot.hdnom.calibrate.external","title":"Plot external calibration results ‚Äî plot.hdnom.calibrate.external","text":"Plot external calibration results","code":""},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.calibrate.external.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot external calibration results ‚Äî plot.hdnom.calibrate.external","text":"","code":"# S3 method for hdnom.calibrate.external plot(   x,   xlim = c(0, 1),   ylim = c(0, 1),   col.pal = c(\"JCO\", \"Lancet\", \"NPG\", \"AAAS\"),   ... )"},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.calibrate.external.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot external calibration results ‚Äî plot.hdnom.calibrate.external","text":"x object returned calibrate_external. xlim x axis limits plot. ylim y axis limits plot. col.pal Color palette use. Possible values \"JCO\", \"Lancet\", \"NPG\", \"AAAS\". Default \"JCO\". ... parameters plot.","code":""},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.calibrate.external.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot external calibration results ‚Äî plot.hdnom.calibrate.external","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.calibrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot calibration results ‚Äî plot.hdnom.calibrate","title":"Plot calibration results ‚Äî plot.hdnom.calibrate","text":"Plot calibration results","code":""},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.calibrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot calibration results ‚Äî plot.hdnom.calibrate","text":"","code":"# S3 method for hdnom.calibrate plot(   x,   xlim = c(0, 1),   ylim = c(0, 1),   col.pal = c(\"JCO\", \"Lancet\", \"NPG\", \"AAAS\"),   ... )"},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.calibrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot calibration results ‚Äî plot.hdnom.calibrate","text":"x object returned calibrate. xlim x axis limits plot. ylim y axis limits plot. col.pal Color palette use. Possible values \"JCO\", \"Lancet\", \"NPG\", \"AAAS\". Default \"JCO\". ... parameters plot.","code":""},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.calibrate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot calibration results ‚Äî plot.hdnom.calibrate","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.compare.calibrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot model comparison by calibration results ‚Äî plot.hdnom.compare.calibrate","title":"Plot model comparison by calibration results ‚Äî plot.hdnom.compare.calibrate","text":"Plot model comparison calibration results","code":""},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.compare.calibrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot model comparison by calibration results ‚Äî plot.hdnom.compare.calibrate","text":"","code":"# S3 method for hdnom.compare.calibrate plot(   x,   xlim = c(0, 1),   ylim = c(0, 1),   col.pal = c(\"JCO\", \"Lancet\", \"NPG\", \"AAAS\"),   ... )"},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.compare.calibrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot model comparison by calibration results ‚Äî plot.hdnom.compare.calibrate","text":"x object returned compare_by_calibrate. xlim x axis limits plot. ylim y axis limits plot. col.pal Color palette use. Possible values \"JCO\", \"Lancet\", \"NPG\", \"AAAS\". Default \"JCO\". ... parameters (used).","code":""},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.compare.calibrate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot model comparison by calibration results ‚Äî plot.hdnom.compare.calibrate","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.compare.validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot model comparison by validation results ‚Äî plot.hdnom.compare.validate","title":"Plot model comparison by validation results ‚Äî plot.hdnom.compare.validate","text":"Plot model comparison validation results","code":""},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.compare.validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot model comparison by validation results ‚Äî plot.hdnom.compare.validate","text":"","code":"# S3 method for hdnom.compare.validate plot(   x,   interval = FALSE,   col.pal = c(\"JCO\", \"Lancet\", \"NPG\", \"AAAS\"),   ylim = NULL,   ... )"},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.compare.validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot model comparison by validation results ‚Äî plot.hdnom.compare.validate","text":"x object returned compare_by_validate. interval Show maximum, minimum, 0.25, 0.75 quantiles time-dependent AUC ribbons? Default FALSE. col.pal Color palette use. Possible values \"JCO\", \"Lancet\", \"NPG\", \"AAAS\". Default \"JCO\". ylim Range y coordinates. example, c(0.5, 1). ... parameters (used).","code":""},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.compare.validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot model comparison by validation results ‚Äî plot.hdnom.compare.validate","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.nomogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot nomogram objects ‚Äî plot.hdnom.nomogram","title":"Plot nomogram objects ‚Äî plot.hdnom.nomogram","text":"Plot nomogram objects","code":""},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.nomogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot nomogram objects ‚Äî plot.hdnom.nomogram","text":"","code":"# S3 method for hdnom.nomogram plot(x, ...)"},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.nomogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot nomogram objects ‚Äî plot.hdnom.nomogram","text":"x object returned as_nomogram. ... parameters.","code":""},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.nomogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot nomogram objects ‚Äî plot.hdnom.nomogram","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.validate.external.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot time-dependent discrimination curves for external validation ‚Äî plot.hdnom.validate.external","title":"Plot time-dependent discrimination curves for external validation ‚Äî plot.hdnom.validate.external","text":"Plot time-dependent discrimination curves external validation","code":""},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.validate.external.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot time-dependent discrimination curves for external validation ‚Äî plot.hdnom.validate.external","text":"","code":"# S3 method for hdnom.validate.external plot(x, col.pal = c(\"JCO\", \"Lancet\", \"NPG\", \"AAAS\"), ylim = NULL, ...)"},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.validate.external.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot time-dependent discrimination curves for external validation ‚Äî plot.hdnom.validate.external","text":"x object returned validate_external. col.pal Color palette use. Possible values \"JCO\", \"Lancet\", \"NPG\", \"AAAS\". Default \"JCO\". ylim Range y coordinates. example, c(0.5, 1). ... parameters (used).","code":""},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.validate.external.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot time-dependent discrimination curves for external validation ‚Äî plot.hdnom.validate.external","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot optimism-corrected time-dependent discrimination curves for validation ‚Äî plot.hdnom.validate","title":"Plot optimism-corrected time-dependent discrimination curves for validation ‚Äî plot.hdnom.validate","text":"Plot optimism-corrected time-dependent discrimination curves validation","code":""},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot optimism-corrected time-dependent discrimination curves for validation ‚Äî plot.hdnom.validate","text":"","code":"# S3 method for hdnom.validate plot(x, col.pal = c(\"JCO\", \"Lancet\", \"NPG\", \"AAAS\"), ylim = NULL, ...)"},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot optimism-corrected time-dependent discrimination curves for validation ‚Äî plot.hdnom.validate","text":"x object returned validate. col.pal Color palette use. Possible values \"JCO\", \"Lancet\", \"NPG\", \"AAAS\". Default \"JCO\". ylim Range y coordinates. example, c(0.5, 1). ... parameters (used).","code":""},{"path":"https://nanx.me/hdnom/reference/plot.hdnom.validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot optimism-corrected time-dependent discrimination curves for validation ‚Äî plot.hdnom.validate","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/predict.hdnom.model.html","id":null,"dir":"Reference","previous_headings":"","what":"Make predictions from high-dimensional Cox models ‚Äî predict.hdnom.model","title":"Make predictions from high-dimensional Cox models ‚Äî predict.hdnom.model","text":"Predict overall survival probability certain time points fitted Cox models.","code":""},{"path":"https://nanx.me/hdnom/reference/predict.hdnom.model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make predictions from high-dimensional Cox models ‚Äî predict.hdnom.model","text":"","code":"# S3 method for hdnom.model predict(object, x, y, newx, pred.at, ...)"},{"path":"https://nanx.me/hdnom/reference/predict.hdnom.model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make predictions from high-dimensional Cox models ‚Äî predict.hdnom.model","text":"object Model object. x Data matrix used fit model. y Response matrix made Surv. newx Matrix (named columns) new values x predictions made. pred.Time point prediction take place. ... parameters (used).","code":""},{"path":"https://nanx.me/hdnom/reference/predict.hdnom.model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make predictions from high-dimensional Cox models ‚Äî predict.hdnom.model","text":"nrow(newx) x length(pred.) matrix containing overall survival probablity.","code":""},{"path":"https://nanx.me/hdnom/reference/predict.hdnom.model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make predictions from high-dimensional Cox models ‚Äî predict.hdnom.model","text":"","code":"data(\"smart\") x <- as.matrix(smart[, -c(1, 2)]) time <- smart$TEVENT event <- smart$EVENT y <- survival::Surv(time, event)  fit <- fit_lasso(x, y, nfolds = 5, rule = \"lambda.1se\", seed = 11) predict(fit, x, y, newx = x[101:105, ], pred.at = 1:10 * 365) #>            365       730      1095      1460      1825      2190      2555 #> [1,] 0.9495796 0.9230039 0.8917647 0.8613490 0.8224649 0.7908937 0.7511011 #> [2,] 0.9600830 0.9388629 0.9137521 0.8891229 0.8573649 0.8313443 0.7982304 #> [3,] 0.9711410 0.9556623 0.9372179 0.9189884 0.8952713 0.8756544 0.8504380 #> [4,] 0.9370250 0.9041739 0.8658684 0.8289029 0.7821335 0.7445751 0.6977844 #> [5,] 0.9656619 0.9473253 0.9255501 0.9041098 0.8763384 0.8534751 0.8242311 #>           2920      3285      3650 #> [1,] 0.7127632 0.6593639 0.6593639 #> [2,] 0.7659723 0.7204170 0.7204170 #> [3,] 0.8255890 0.7899889 0.7899889 #> [4,] 0.6533031 0.5923716 0.5923716 #> [5,] 0.7955765 0.7548149 0.7548149"},{"path":"https://nanx.me/hdnom/reference/print.hdnom.calibrate.external.html","id":null,"dir":"Reference","previous_headings":"","what":"Print external calibration results ‚Äî print.hdnom.calibrate.external","title":"Print external calibration results ‚Äî print.hdnom.calibrate.external","text":"Print external calibration results","code":""},{"path":"https://nanx.me/hdnom/reference/print.hdnom.calibrate.external.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print external calibration results ‚Äî print.hdnom.calibrate.external","text":"","code":"# S3 method for hdnom.calibrate.external print(x, ...)"},{"path":"https://nanx.me/hdnom/reference/print.hdnom.calibrate.external.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print external calibration results ‚Äî print.hdnom.calibrate.external","text":"x object returned calibrate_external. ... parameters (used).","code":""},{"path":"https://nanx.me/hdnom/reference/print.hdnom.calibrate.external.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print external calibration results ‚Äî print.hdnom.calibrate.external","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/print.hdnom.calibrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Print calibration results ‚Äî print.hdnom.calibrate","title":"Print calibration results ‚Äî print.hdnom.calibrate","text":"Print calibration results","code":""},{"path":"https://nanx.me/hdnom/reference/print.hdnom.calibrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print calibration results ‚Äî print.hdnom.calibrate","text":"","code":"# S3 method for hdnom.calibrate print(x, ...)"},{"path":"https://nanx.me/hdnom/reference/print.hdnom.calibrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print calibration results ‚Äî print.hdnom.calibrate","text":"x object returned calibrate. ... parameters (used).","code":""},{"path":"https://nanx.me/hdnom/reference/print.hdnom.calibrate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print calibration results ‚Äî print.hdnom.calibrate","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/print.hdnom.compare.calibrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Print model comparison by calibration results ‚Äî print.hdnom.compare.calibrate","title":"Print model comparison by calibration results ‚Äî print.hdnom.compare.calibrate","text":"Print model comparison calibration results","code":""},{"path":"https://nanx.me/hdnom/reference/print.hdnom.compare.calibrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print model comparison by calibration results ‚Äî print.hdnom.compare.calibrate","text":"","code":"# S3 method for hdnom.compare.calibrate print(x, ...)"},{"path":"https://nanx.me/hdnom/reference/print.hdnom.compare.calibrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print model comparison by calibration results ‚Äî print.hdnom.compare.calibrate","text":"x object returned compare_by_calibrate. ... parameters (used).","code":""},{"path":"https://nanx.me/hdnom/reference/print.hdnom.compare.calibrate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print model comparison by calibration results ‚Äî print.hdnom.compare.calibrate","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/print.hdnom.compare.validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Print model comparison by validation results ‚Äî print.hdnom.compare.validate","title":"Print model comparison by validation results ‚Äî print.hdnom.compare.validate","text":"Print model comparison validation results","code":""},{"path":"https://nanx.me/hdnom/reference/print.hdnom.compare.validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print model comparison by validation results ‚Äî print.hdnom.compare.validate","text":"","code":"# S3 method for hdnom.compare.validate print(x, ...)"},{"path":"https://nanx.me/hdnom/reference/print.hdnom.compare.validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print model comparison by validation results ‚Äî print.hdnom.compare.validate","text":"x object returned compare_by_validate. ... parameters (used).","code":""},{"path":"https://nanx.me/hdnom/reference/print.hdnom.compare.validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print model comparison by validation results ‚Äî print.hdnom.compare.validate","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/print.hdnom.model.html","id":null,"dir":"Reference","previous_headings":"","what":"Print high-dimensional Cox model objects ‚Äî print.hdnom.model","title":"Print high-dimensional Cox model objects ‚Äî print.hdnom.model","text":"Print high-dimensional Cox model objects","code":""},{"path":"https://nanx.me/hdnom/reference/print.hdnom.model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print high-dimensional Cox model objects ‚Äî print.hdnom.model","text":"","code":"# S3 method for hdnom.model print(x, ...)"},{"path":"https://nanx.me/hdnom/reference/print.hdnom.model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print high-dimensional Cox model objects ‚Äî print.hdnom.model","text":"x Model object. ... parameters (used).","code":""},{"path":"https://nanx.me/hdnom/reference/print.hdnom.model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print high-dimensional Cox model objects ‚Äî print.hdnom.model","text":"","code":"data(\"smart\") x <- as.matrix(smart[, -c(1, 2)]) time <- smart$TEVENT event <- smart$EVENT y <- survival::Surv(time, event)  fit <- fit_lasso(x, y, nfolds = 5, rule = \"lambda.1se\", seed = 11) print(fit) #> High-Dimensional Cox Model Object #> Random seed: 11  #> Model type: lasso #> Best lambda: 0.02581047"},{"path":"https://nanx.me/hdnom/reference/print.hdnom.nomogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Print nomograms objects ‚Äî print.hdnom.nomogram","title":"Print nomograms objects ‚Äî print.hdnom.nomogram","text":"Print nomograms objects","code":""},{"path":"https://nanx.me/hdnom/reference/print.hdnom.nomogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print nomograms objects ‚Äî print.hdnom.nomogram","text":"","code":"# S3 method for hdnom.nomogram print(x, ...)"},{"path":"https://nanx.me/hdnom/reference/print.hdnom.nomogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print nomograms objects ‚Äî print.hdnom.nomogram","text":"x object returned as_nomogram. ... parameters.","code":""},{"path":"https://nanx.me/hdnom/reference/print.hdnom.nomogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print nomograms objects ‚Äî print.hdnom.nomogram","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/print.hdnom.validate.external.html","id":null,"dir":"Reference","previous_headings":"","what":"Print external validation results ‚Äî print.hdnom.validate.external","title":"Print external validation results ‚Äî print.hdnom.validate.external","text":"Print external validation results","code":""},{"path":"https://nanx.me/hdnom/reference/print.hdnom.validate.external.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print external validation results ‚Äî print.hdnom.validate.external","text":"","code":"# S3 method for hdnom.validate.external print(x, ...)"},{"path":"https://nanx.me/hdnom/reference/print.hdnom.validate.external.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print external validation results ‚Äî print.hdnom.validate.external","text":"x object returned validate_external. ... parameters (used).","code":""},{"path":"https://nanx.me/hdnom/reference/print.hdnom.validate.external.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print external validation results ‚Äî print.hdnom.validate.external","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/print.hdnom.validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Print validation results ‚Äî print.hdnom.validate","title":"Print validation results ‚Äî print.hdnom.validate","text":"Print validation results","code":""},{"path":"https://nanx.me/hdnom/reference/print.hdnom.validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print validation results ‚Äî print.hdnom.validate","text":"","code":"# S3 method for hdnom.validate print(x, ...)"},{"path":"https://nanx.me/hdnom/reference/print.hdnom.validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print validation results ‚Äî print.hdnom.validate","text":"x object returned validate. ... parameters (used).","code":""},{"path":"https://nanx.me/hdnom/reference/print.hdnom.validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print validation results ‚Äî print.hdnom.validate","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/smart.html","id":null,"dir":"Reference","previous_headings":"","what":"Imputed SMART study data ‚Äî smart","title":"Imputed SMART study data ‚Äî smart","text":"Imputed SMART study data (missing values).","code":""},{"path":"https://nanx.me/hdnom/reference/smart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Imputed SMART study data ‚Äî smart","text":"","code":"data(smart)"},{"path":"https://nanx.me/hdnom/reference/smart.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Imputed SMART study data ‚Äî smart","text":"numeric matrix 3873 samples, 29 variables (27 variables + time variable + event variable): Demographics SEX - gender AGE - age years Classical risk factors SMOKING - smoking (never, former, current) PACKYRS - years ALCOHOL - alcohol use (never, former, current) BMI - Body mass index, kg/m^2 DIABETES Blood pressure SYSTH - Systolic, hand, mm Hg SYSTBP - Systolic, automatic, mm Hg DIASTH - Diastolic, hand, mm Hg DIASTBP - Diastolic, automatic, mm Hg Lipid levels CHOL - Total cholesterol, mmol/L HDL - High-density lipoprotein cholesterol, mmol/L LDL - Low-density lipoprotein cholesterol, mmol/L TRIG - Triglycerides, mmol/L Previous symptomatic atherosclerosis CEREBRAL - Cerebral CARDIAC - Coronary PERIPH - Peripheral AAA - Abdominal aortic aneurysm Markers atherosclerosis HOMOC - Homocysteine, \\(\\mu\\)mol/L GLUT - Glutamine, \\(\\mu\\)mol/L CREAT - Creatinine clearance, mL/min ALBUMIN - Albumin (, micro, macro) IMT - Intima media thickness, mm STENOSIS - Carotid artery stenosis > 50%","code":""},{"path":"https://nanx.me/hdnom/reference/smart.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Imputed SMART study data ‚Äî smart","text":"See data-raw/smart.R code generate data.","code":""},{"path":"https://nanx.me/hdnom/reference/smart.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Imputed SMART study data ‚Äî smart","text":"Steyerberg, E. W. (2008). Clinical prediction models: practical approach development, validation, updating. Springer Science & Business Media.","code":""},{"path":"https://nanx.me/hdnom/reference/smart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Imputed SMART study data ‚Äî smart","text":"","code":"data(smart) dim(smart) #> [1] 3873   29"},{"path":"https://nanx.me/hdnom/reference/smarto.html","id":null,"dir":"Reference","previous_headings":"","what":"Original SMART study data ‚Äî smarto","title":"Original SMART study data ‚Äî smarto","text":"Original SMART study data (missing values) Steyerberg et, al. 2008.","code":""},{"path":"https://nanx.me/hdnom/reference/smarto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Original SMART study data ‚Äî smarto","text":"","code":"data(smarto)"},{"path":"https://nanx.me/hdnom/reference/smarto.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Original SMART study data ‚Äî smarto","text":"numeric matrix 3873 samples, 29 variables (27 variables + time variable + event variable): Demographics SEX - gender AGE - age years Classical risk factors SMOKING - smoking (never, former, current) PACKYRS - years ALCOHOL - alcohol use (never, former, current) BMI - Body mass index, kg/m^2 DIABETES Blood pressure SYSTH - Systolic, hand, mm Hg SYSTBP - Systolic, automatic, mm Hg DIASTH - Diastolic, hand, mm Hg DIASTBP - Diastolic, automatic, mm Hg Lipid levels CHOL - Total cholesterol, mmol/L HDL - High-density lipoprotein cholesterol, mmol/L LDL - Low-density lipoprotein cholesterol, mmol/L TRIG - Triglycerides, mmol/L Previous symptomatic atherosclerosis CEREBRAL - Cerebral CARDIAC - Coronary PERIPH - Peripheral AAA - Abdominal aortic aneurysm Markers atherosclerosis HOMOC - Homocysteine, \\(\\mu\\)mol/L GLUT - Glutamine, \\(\\mu\\)mol/L CREAT - Creatinine clearance, mL/min ALBUMIN - Albumin (, micro, macro) IMT - Intima media thickness, mm STENOSIS - Carotid artery stenosis > 50%","code":""},{"path":"https://nanx.me/hdnom/reference/smarto.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Original SMART study data ‚Äî smarto","text":"Steyerberg, E. W. (2008). Clinical prediction models: practical approach development, validation, updating. Springer Science & Business Media.","code":""},{"path":"https://nanx.me/hdnom/reference/smarto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Original SMART study data ‚Äî smarto","text":"","code":"data(smarto) dim(smarto) #> [1] 3873   29"},{"path":"https://nanx.me/hdnom/reference/summary.hdnom.calibrate.external.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of external calibration results ‚Äî summary.hdnom.calibrate.external","title":"Summary of external calibration results ‚Äî summary.hdnom.calibrate.external","text":"Summary external calibration results","code":""},{"path":"https://nanx.me/hdnom/reference/summary.hdnom.calibrate.external.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of external calibration results ‚Äî summary.hdnom.calibrate.external","text":"","code":"# S3 method for hdnom.calibrate.external summary(object, ...)"},{"path":"https://nanx.me/hdnom/reference/summary.hdnom.calibrate.external.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of external calibration results ‚Äî summary.hdnom.calibrate.external","text":"object object returned calibrate_external. ... parameters (used).","code":""},{"path":"https://nanx.me/hdnom/reference/summary.hdnom.calibrate.external.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of external calibration results ‚Äî summary.hdnom.calibrate.external","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/summary.hdnom.calibrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of calibration results ‚Äî summary.hdnom.calibrate","title":"Summary of calibration results ‚Äî summary.hdnom.calibrate","text":"Summary calibration results","code":""},{"path":"https://nanx.me/hdnom/reference/summary.hdnom.calibrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of calibration results ‚Äî summary.hdnom.calibrate","text":"","code":"# S3 method for hdnom.calibrate summary(object, ...)"},{"path":"https://nanx.me/hdnom/reference/summary.hdnom.calibrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of calibration results ‚Äî summary.hdnom.calibrate","text":"object object returned calibrate. ... parameters (used).","code":""},{"path":"https://nanx.me/hdnom/reference/summary.hdnom.calibrate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of calibration results ‚Äî summary.hdnom.calibrate","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/summary.hdnom.compare.calibrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of model comparison by calibration results ‚Äî summary.hdnom.compare.calibrate","title":"Summary of model comparison by calibration results ‚Äî summary.hdnom.compare.calibrate","text":"Summary model comparison calibration results","code":""},{"path":"https://nanx.me/hdnom/reference/summary.hdnom.compare.calibrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of model comparison by calibration results ‚Äî summary.hdnom.compare.calibrate","text":"","code":"# S3 method for hdnom.compare.calibrate summary(object, ...)"},{"path":"https://nanx.me/hdnom/reference/summary.hdnom.compare.calibrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of model comparison by calibration results ‚Äî summary.hdnom.compare.calibrate","text":"object object returned compare_by_calibrate. ... parameters (used).","code":""},{"path":"https://nanx.me/hdnom/reference/summary.hdnom.compare.calibrate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of model comparison by calibration results ‚Äî summary.hdnom.compare.calibrate","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/summary.hdnom.compare.validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of model comparison by validation results ‚Äî summary.hdnom.compare.validate","title":"Summary of model comparison by validation results ‚Äî summary.hdnom.compare.validate","text":"Summary model comparison validation results","code":""},{"path":"https://nanx.me/hdnom/reference/summary.hdnom.compare.validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of model comparison by validation results ‚Äî summary.hdnom.compare.validate","text":"","code":"# S3 method for hdnom.compare.validate summary(object, silent = FALSE, ...)"},{"path":"https://nanx.me/hdnom/reference/summary.hdnom.compare.validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of model comparison by validation results ‚Äî summary.hdnom.compare.validate","text":"object object compare_by_validate. silent Print summary table header , default FALSE. ... parameters (used).","code":""},{"path":"https://nanx.me/hdnom/reference/summary.hdnom.compare.validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of model comparison by validation results ‚Äî summary.hdnom.compare.validate","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/summary.hdnom.validate.external.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of external validation results ‚Äî summary.hdnom.validate.external","title":"Summary of external validation results ‚Äî summary.hdnom.validate.external","text":"Summary external validation results","code":""},{"path":"https://nanx.me/hdnom/reference/summary.hdnom.validate.external.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of external validation results ‚Äî summary.hdnom.validate.external","text":"","code":"# S3 method for hdnom.validate.external summary(object, silent = FALSE, ...)"},{"path":"https://nanx.me/hdnom/reference/summary.hdnom.validate.external.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of external validation results ‚Äî summary.hdnom.validate.external","text":"object object returned validate_external. silent Print summary table header , default FALSE. ... parameters (used).","code":""},{"path":"https://nanx.me/hdnom/reference/summary.hdnom.validate.external.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of external validation results ‚Äî summary.hdnom.validate.external","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/summary.hdnom.validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of validation results ‚Äî summary.hdnom.validate","title":"Summary of validation results ‚Äî summary.hdnom.validate","text":"Summary validation results","code":""},{"path":"https://nanx.me/hdnom/reference/summary.hdnom.validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of validation results ‚Äî summary.hdnom.validate","text":"","code":"# S3 method for hdnom.validate summary(object, silent = FALSE, ...)"},{"path":"https://nanx.me/hdnom/reference/summary.hdnom.validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of validation results ‚Äî summary.hdnom.validate","text":"object validate object. silent Print summary table header , default FALSE. ... parameters (used).","code":""},{"path":"https://nanx.me/hdnom/reference/summary.hdnom.validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of validation results ‚Äî summary.hdnom.validate","text":"","code":"NULL #> NULL"},{"path":"https://nanx.me/hdnom/reference/theme_hdnom.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot theme (ggplot2) for hdnom ‚Äî theme_hdnom","title":"Plot theme (ggplot2) for hdnom ‚Äî theme_hdnom","text":"Plot theme (ggplot2) hdnom","code":""},{"path":"https://nanx.me/hdnom/reference/theme_hdnom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot theme (ggplot2) for hdnom ‚Äî theme_hdnom","text":"","code":"theme_hdnom(base_size = 14)"},{"path":"https://nanx.me/hdnom/reference/theme_hdnom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot theme (ggplot2) for hdnom ‚Äî theme_hdnom","text":"base_size base font size","code":""},{"path":"https://nanx.me/hdnom/reference/validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate high-dimensional Cox models with time-dependent AUC ‚Äî validate","title":"Validate high-dimensional Cox models with time-dependent AUC ‚Äî validate","text":"Validate high-dimensional Cox models time-dependent AUC","code":""},{"path":"https://nanx.me/hdnom/reference/validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate high-dimensional Cox models with time-dependent AUC ‚Äî validate","text":"","code":"validate(   x,   time,   event,   model.type = c(\"lasso\", \"alasso\", \"flasso\", \"enet\", \"aenet\", \"mcp\", \"mnet\", \"scad\",     \"snet\"),   alpha,   lambda,   pen.factor = NULL,   gamma,   lambda1,   lambda2,   method = c(\"bootstrap\", \"cv\", \"repeated.cv\"),   boot.times = NULL,   nfolds = NULL,   rep.times = NULL,   tauc.type = c(\"CD\", \"SZ\", \"UNO\"),   tauc.time,   seed = 1001,   trace = TRUE )"},{"path":"https://nanx.me/hdnom/reference/validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate high-dimensional Cox models with time-dependent AUC ‚Äî validate","text":"x Matrix training data used fitting model; run validation. time Survival time. Must length number rows x. event Status indicator, normally 0 = alive, 1 = dead. Must length number rows x. model.type Model type validate. one \"lasso\", \"alasso\", \"flasso\", \"enet\", \"aenet\", \"mcp\", \"mnet\", \"scad\", \"snet\". alpha Value elastic-net mixing parameter alpha enet, aenet, mnet, snet models. lasso, alasso, mcp, scad models, please set alpha = 1. alpha=1: lasso (l1) penalty; alpha=0: ridge (l2) penalty. Note mnet snet models, alpha can set close 0 0 exactly. lambda Value penalty parameter lambda use model fits resampled data. fitted Cox model. pen.factor Penalty factors apply coefficient. fitted adaptive lasso adaptive elastic-net model. gamma Value model parameter gamma MCP/SCAD/Mnet/Snet models. lambda1 Value penalty parameter lambda1 fused lasso model. lambda2 Value penalty parameter lambda2 fused lasso model. method Validation method. \"bootstrap\", \"cv\", \"repeated.cv\". boot.times Number repetitions bootstrap. nfolds Number folds cross-validation repeated cross-validation. rep.times Number repeated times repeated cross-validation. tauc.type Type time-dependent AUC. Including \"CD\" proposed Chambless Diao (2006)., \"SZ\" proposed Song Zhou (2008)., \"UNO\" proposed Uno et al. (2007). tauc.time Numeric vector. Time points evaluate time-dependent AUC. seed random seed resampling. trace Logical. Output validation progress . Default TRUE.","code":""},{"path":"https://nanx.me/hdnom/reference/validate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Validate high-dimensional Cox models with time-dependent AUC ‚Äî validate","text":"Chambless, L. E. G. Diao (2006). Estimation time-dependent area ROC curve long-term risk prediction. Statistics Medicine 25, 3474--3486. Song, X. X.-H. Zhou (2008). semiparametric approach covariate specific ROC curve survival outcome. Statistica Sinica 18, 947--965. Uno, H., T. Cai, L. Tian, L. J. Wei (2007). Evaluating prediction rules t-year survivors censored regression models. Journal American Statistical Association 102, 527--537.","code":""},{"path":"https://nanx.me/hdnom/reference/validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate high-dimensional Cox models with time-dependent AUC ‚Äî validate","text":"","code":"data(smart) x <- as.matrix(smart[, -c(1, 2)])[1:500, ] time <- smart$TEVENT[1:500] event <- smart$EVENT[1:500] y <- survival::Surv(time, event)  fit <- fit_lasso(x, y, nfolds = 5, rule = \"lambda.1se\", seed = 11)  # Model validation by bootstrap with time-dependent AUC # Normally boot.times should be set to 200 or more, # we set it to 3 here only to save example running time. val.boot <- validate(   x, time, event,   model.type = \"lasso\",   alpha = 1, lambda = fit$lambda,   method = \"bootstrap\", boot.times = 3,   tauc.type = \"UNO\", tauc.time = seq(0.25, 2, 0.25) * 365,   seed = 1010 ) #> Start bootstrap sample 1  #> Start bootstrap sample 2  #> Start bootstrap sample 3   # Model validation by 5-fold cross-validation with time-dependent AUC val.cv <- validate(   x, time, event,   model.type = \"lasso\",   alpha = 1, lambda = fit$lambda,   method = \"cv\", nfolds = 5,   tauc.type = \"UNO\", tauc.time = seq(0.25, 2, 0.25) * 365,   seed = 1010 ) #> Start fold 1  #> Start fold 2  #> Start fold 3  #> Start fold 4  #> Start fold 5   # Model validation by repeated cross-validation with time-dependent AUC val.repcv <- validate(   x, time, event,   model.type = \"lasso\",   alpha = 1, lambda = fit$lambda,   method = \"repeated.cv\", nfolds = 5, rep.times = 3,   tauc.type = \"UNO\", tauc.time = seq(0.25, 2, 0.25) * 365,   seed = 1010 ) #> Start repeat round 1 fold 1  #> Start repeat round 1 fold 2  #> Start repeat round 1 fold 3  #> Start repeat round 1 fold 4  #> Start repeat round 1 fold 5  #> Start repeat round 2 fold 1  #> Start repeat round 2 fold 2  #> Start repeat round 2 fold 3  #> Start repeat round 2 fold 4  #> Start repeat round 2 fold 5  #> Start repeat round 3 fold 1  #> Start repeat round 3 fold 2  #> Start repeat round 3 fold 3  #> Start repeat round 3 fold 4  #> Start repeat round 3 fold 5   # bootstrap-based discrimination curves has a very narrow band print(val.boot) #> High-Dimensional Cox Model Validation Object #> Random seed: 1010  #> Validation method: bootstrap #> Bootstrap samples: 3  #> Model type: lasso  #> glmnet model alpha: 1  #> glmnet model lambda: 0.0466592  #> glmnet model penalty factor: not specified #> Time-dependent AUC type: UNO  #> Evaluation time points for tAUC: 91.25 182.5 273.75 365 456.25 547.5 638.75 730 summary(val.boot) #> Time-Dependent AUC Summary at Evaluation Time Points #>              91.25     182.5    273.75       365    456.25     547.5    638.75 #> Mean     0.6076768 0.6770503 0.7310150 0.7669546 0.7678797 0.7805710 0.7592774 #> Min      0.5741414 0.6582779 0.7163194 0.7479257 0.7491532 0.7607504 0.7495020 #> 0.25 Qt. 0.5818182 0.6594434 0.7209654 0.7549788 0.7560774 0.7678429 0.7512654 #> Median   0.5894949 0.6606089 0.7256113 0.7620318 0.7630017 0.7749355 0.7530288 #> 0.75 Qt. 0.6244444 0.6864366 0.7383628 0.7764691 0.7772430 0.7904813 0.7641652 #> Max      0.6593939 0.7122642 0.7511143 0.7909064 0.7914843 0.8060271 0.7753015 #>                730 #> Mean     0.7503529 #> Min      0.7465142 #> 0.25 Qt. 0.7485221 #> Median   0.7505299 #> 0.75 Qt. 0.7522723 #> Max      0.7540147 plot(val.boot) #>              91.25     182.5    273.75       365    456.25     547.5    638.75 #> Mean     0.6076768 0.6770503 0.7310150 0.7669546 0.7678797 0.7805710 0.7592774 #> Min      0.5741414 0.6582779 0.7163194 0.7479257 0.7491532 0.7607504 0.7495020 #> 0.25 Qt. 0.5818182 0.6594434 0.7209654 0.7549788 0.7560774 0.7678429 0.7512654 #> Median   0.5894949 0.6606089 0.7256113 0.7620318 0.7630017 0.7749355 0.7530288 #> 0.75 Qt. 0.6244444 0.6864366 0.7383628 0.7764691 0.7772430 0.7904813 0.7641652 #> Max      0.6593939 0.7122642 0.7511143 0.7909064 0.7914843 0.8060271 0.7753015 #>                730 #> Mean     0.7503529 #> Min      0.7465142 #> 0.25 Qt. 0.7485221 #> Median   0.7505299 #> 0.75 Qt. 0.7522723 #> Max      0.7540147   # k-fold cv provides a more strict evaluation than bootstrap print(val.cv) #> High-Dimensional Cox Model Validation Object #> Random seed: 1010  #> Validation method: k-fold cross-validation #> Cross-validation folds: 5  #> Model type: lasso  #> glmnet model alpha: 1  #> glmnet model lambda: 0.0466592  #> glmnet model penalty factor: not specified #> Time-dependent AUC type: UNO  #> Evaluation time points for tAUC: 91.25 182.5 273.75 365 456.25 547.5 638.75 730 summary(val.cv) #> Time-Dependent AUC Summary at Evaluation Time Points #>              91.25     182.5    273.75       365    456.25     547.5    638.75 #> Mean     0.3594933 0.5725705 0.7359625 0.7898166 0.7913584 0.7995129 0.7911661 #> Min      0.0050000 0.0050000 0.5871406 0.5874762 0.5874762 0.5888388 0.5204137 #> 0.25 Qt. 0.0050000 0.4276249 0.6262626 0.7323377 0.7400465 0.7499517 0.7992726 #> Median   0.3724490 0.7473958 0.7653061 0.8174583 0.8174583 0.8437509 0.8211214 #> 0.75 Qt. 0.5867347 0.7653061 0.7747872 0.8854951 0.8854951 0.8902918 0.8902918 #> Max      0.8282828 0.9175258 0.9263158 0.9263158 0.9263158 0.9247312 0.9247312 #>                730 #> Mean     0.7617612 #> Min      0.5204137 #> 0.25 Qt. 0.7854386 #> Median   0.7926118 #> 0.75 Qt. 0.8200499 #> Max      0.8902918 plot(val.cv) #>              91.25     182.5    273.75       365    456.25     547.5    638.75 #> Mean     0.3594933 0.5725705 0.7359625 0.7898166 0.7913584 0.7995129 0.7911661 #> Min      0.0050000 0.0050000 0.5871406 0.5874762 0.5874762 0.5888388 0.5204137 #> 0.25 Qt. 0.0050000 0.4276249 0.6262626 0.7323377 0.7400465 0.7499517 0.7992726 #> Median   0.3724490 0.7473958 0.7653061 0.8174583 0.8174583 0.8437509 0.8211214 #> 0.75 Qt. 0.5867347 0.7653061 0.7747872 0.8854951 0.8854951 0.8902918 0.8902918 #> Max      0.8282828 0.9175258 0.9263158 0.9263158 0.9263158 0.9247312 0.9247312 #>                730 #> Mean     0.7617612 #> Min      0.5204137 #> 0.25 Qt. 0.7854386 #> Median   0.7926118 #> 0.75 Qt. 0.8200499 #> Max      0.8902918   # repeated cv provides similar results as k-fold cv # but more robust than k-fold cv print(val.repcv) #> High-Dimensional Cox Model Validation Object #> Random seed: 1010  #> Validation method: repeated cross-validation #> Cross-validation folds: 5  #> Cross-validation repeated times: 3  #> Model type: lasso  #> glmnet model alpha: 1  #> glmnet model lambda: 0.0466592  #> glmnet model penalty factor: not specified #> Time-dependent AUC type: UNO  #> Evaluation time points for tAUC: 91.25 182.5 273.75 365 456.25 547.5 638.75 730 summary(val.repcv) #> Note: for repeated CV, we evaluated quantile statistic tables for #> each CV repeat, then calculated element-wise mean across all tables. #> Time-Dependent AUC Summary at Evaluation Time Points #>                      91.25     182.5    273.75       365    456.25     547.5 #> Mean of Mean     0.3610550 0.6420535 0.7360920 0.7818087 0.7829022 0.7915698 #> Mean of Min      0.0050000 0.2655556 0.5455362 0.5748210 0.5748210 0.5937272 #> Mean of 0.25 Qt. 0.0050000 0.5541139 0.6359196 0.7380272 0.7416286 0.7373083 #> Mean of Median   0.4021086 0.7194473 0.7891285 0.8121328 0.8139987 0.8129568 #> Mean of 0.75 Qt. 0.6086546 0.7929182 0.8198284 0.8606522 0.8606522 0.8881416 #> Mean of Max      0.7845118 0.8782325 0.8900470 0.9234104 0.9234104 0.9257152 #>                     638.75       730 #> Mean of Mean     0.7713189 0.7498721 #> Mean of Min      0.5495460 0.5453652 #> Mean of 0.25 Qt. 0.6638718 0.6775897 #> Mean of Median   0.8185457 0.7557037 #> Mean of 0.75 Qt. 0.8941499 0.8607948 #> Mean of Max      0.9304813 0.9099070 plot(val.repcv) #>                      91.25     182.5    273.75       365    456.25     547.5 #> Mean of Mean     0.3610550 0.6420535 0.7360920 0.7818087 0.7829022 0.7915698 #> Mean of Min      0.0050000 0.2655556 0.5455362 0.5748210 0.5748210 0.5937272 #> Mean of 0.25 Qt. 0.0050000 0.5541139 0.6359196 0.7380272 0.7416286 0.7373083 #> Mean of Median   0.4021086 0.7194473 0.7891285 0.8121328 0.8139987 0.8129568 #> Mean of 0.75 Qt. 0.6086546 0.7929182 0.8198284 0.8606522 0.8606522 0.8881416 #> Mean of Max      0.7845118 0.8782325 0.8900470 0.9234104 0.9234104 0.9257152 #>                     638.75       730 #> Mean of Mean     0.7713189 0.7498721 #> Mean of Min      0.5495460 0.5453652 #> Mean of 0.25 Qt. 0.6638718 0.6775897 #> Mean of Median   0.8185457 0.7557037 #> Mean of 0.75 Qt. 0.8941499 0.8607948 #> Mean of Max      0.9304813 0.9099070  # # Test fused lasso, SCAD, and Mnet models # # data(smart) # x = as.matrix(smart[, -c(1, 2)])[1:500,] # time = smart$TEVENT[1:500] # event = smart$EVENT[1:500] # y = survival::Surv(time, event) # # set.seed(1010) # val.boot = validate( #   x, time, event, model.type = \"flasso\", #   lambda1 = 5, lambda2 = 2, #   method = \"bootstrap\", boot.times = 10, #   tauc.type = \"UNO\", tauc.time = seq(0.25, 2, 0.25) * 365, #   seed = 1010) # # val.cv = validate( #   x, time, event, model.type = \"scad\", #   gamma = 3.7, alpha = 1, lambda = 0.05, #   method = \"cv\", nfolds = 5, #   tauc.type = \"UNO\", tauc.time = seq(0.25, 2, 0.25) * 365, #   seed = 1010) # # val.repcv = validate( #   x, time, event, model.type = \"mnet\", #   gamma = 3, alpha = 0.3, lambda = 0.05, #   method = \"repeated.cv\", nfolds = 5, rep.times = 3, #   tauc.type = \"UNO\", tauc.time = seq(0.25, 2, 0.25) * 365, #   seed = 1010) # # print(val.boot) # summary(val.boot) # plot(val.boot) # # print(val.cv) # summary(val.cv) # plot(val.cv) # # print(val.repcv) # summary(val.repcv) # plot(val.repcv)"},{"path":"https://nanx.me/hdnom/reference/validate_external.html","id":null,"dir":"Reference","previous_headings":"","what":"Externally validate high-dimensional Cox models with time-dependent AUC ‚Äî validate_external","title":"Externally validate high-dimensional Cox models with time-dependent AUC ‚Äî validate_external","text":"Externally validate high-dimensional Cox models time-dependent AUC","code":""},{"path":"https://nanx.me/hdnom/reference/validate_external.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Externally validate high-dimensional Cox models with time-dependent AUC ‚Äî validate_external","text":"","code":"validate_external(   object,   x,   time,   event,   x_new,   time_new,   event_new,   tauc.type = c(\"CD\", \"SZ\", \"UNO\"),   tauc.time )"},{"path":"https://nanx.me/hdnom/reference/validate_external.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Externally validate high-dimensional Cox models with time-dependent AUC ‚Äî validate_external","text":"object Model object fitted hdnom::fit_*(). x Matrix training data used fitting model. time Survival time training data. Must length number rows x. event Status indicator training data, normally 0 = alive, 1 = dead. Must length number rows x. x_new Matrix predictors external validation data. time_new Survival time external validation data. Must length number rows x_new. event_new Status indicator external validation data, normally 0 = alive, 1 = dead. Must length number rows x_new. tauc.type Type time-dependent AUC. Including \"CD\" proposed Chambless Diao (2006)., \"SZ\" proposed Song Zhou (2008)., \"UNO\" proposed Uno et al. (2007). tauc.time Numeric vector. Time points evaluate time-dependent AUC.","code":""},{"path":"https://nanx.me/hdnom/reference/validate_external.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Externally validate high-dimensional Cox models with time-dependent AUC ‚Äî validate_external","text":"Chambless, L. E. G. Diao (2006). Estimation time-dependent area ROC curve long-term risk prediction. Statistics Medicine 25, 3474--3486. Song, X. X.-H. Zhou (2008). semiparametric approach covariate specific ROC curve survival outcome. Statistica Sinica 18, 947--965. Uno, H., T. Cai, L. Tian, L. J. Wei (2007). Evaluating prediction rules t-year survivors censored regression models. Journal American Statistical Association 102, 527--537.","code":""},{"path":"https://nanx.me/hdnom/reference/validate_external.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Externally validate high-dimensional Cox models with time-dependent AUC ‚Äî validate_external","text":"","code":"data(smart) # Use the first 1000 samples as training data # (the data used for internal validation) x <- as.matrix(smart[, -c(1, 2)])[1:1000, ] time <- smart$TEVENT[1:1000] event <- smart$EVENT[1:1000]  # Take the next 1000 samples as external validation data # In practice, usually use data collected in other studies x_new <- as.matrix(smart[, -c(1, 2)])[1001:2000, ] time_new <- smart$TEVENT[1001:2000] event_new <- smart$EVENT[1001:2000]  # Fit Cox model with lasso penalty fit <- fit_lasso(   x, survival::Surv(time, event),   nfolds = 5, rule = \"lambda.1se\", seed = 11 )  # External validation with time-dependent AUC val.ext <- validate_external(   fit, x, time, event,   x_new, time_new, event_new,   tauc.type = \"UNO\",   tauc.time = seq(0.25, 2, 0.25) * 365 )  print(val.ext) #> High-Dimensional Cox Model External Validation Object #> Model type: lasso  #> Time-dependent AUC type: UNO  #> Evaluation time points for tAUC: 91.25 182.5 273.75 365 456.25 547.5 638.75 730 summary(val.ext) #> Time-Dependent AUC Summary at Evaluation Time Points #>         91.25     182.5    273.75       365    456.25     547.5    638.75 #> AUC 0.4971912 0.5710299 0.6293697 0.6144638 0.6352992 0.6495091 0.6544655 #>           730 #> AUC 0.6602009 plot(val.ext) #>         91.25     182.5    273.75       365    456.25     547.5    638.75 #> AUC 0.4971912 0.5710299 0.6293697 0.6144638 0.6352992 0.6495091 0.6544655 #>           730 #> AUC 0.6602009   # # Test fused lasso, MCP, and Snet models # data(smart) # # Use first 600 samples as training data # # (the data used for internal validation) # x <- as.matrix(smart[, -c(1, 2)])[1:600, ] # time <- smart$TEVENT[1:600] # event <- smart$EVENT[1:600] # # # Take 500 samples as external validation data. # # In practice, usually use data collected in other studies. # x_new <- as.matrix(smart[, -c(1, 2)])[1001:1500, ] # time_new <- smart$TEVENT[1001:1500] # event_new <- smart$EVENT[1001:1500] # # flassofit <- fit_flasso(x, survival::Surv(time, event), nfolds = 5, seed = 11) # scadfit <- fit_mcp(x, survival::Surv(time, event), nfolds = 5, seed = 11) # mnetfit <- fit_snet(x, survival::Surv(time, event), nfolds = 5, seed = 11) # # val.ext1 <- validate_external( #   flassofit, x, time, event, #   x_new, time_new, event_new, #   tauc.type = \"UNO\", #   tauc.time = seq(0.25, 2, 0.25) * 365) # # val.ext2 <- validate_external( #   scadfit, x, time, event, #   x_new, time_new, event_new, #   tauc.type = \"CD\", #   tauc.time = seq(0.25, 2, 0.25) * 365) # # val.ext3 <- validate_external( #   mnetfit, x, time, event, #   x_new, time_new, event_new, #   tauc.type = \"SZ\", #   tauc.time = seq(0.25, 2, 0.25) * 365) # # print(val.ext1) # summary(val.ext1) # plot(val.ext1) # # print(val.ext2) # summary(val.ext2) # plot(val.ext2) # # print(val.ext3) # summary(val.ext3) # plot(val.ext3)"},{"path":"https://nanx.me/hdnom/news/index.html","id":"hdnom-602","dir":"Changelog","previous_headings":"","what":"hdnom 6.0.2","title":"hdnom 6.0.2","text":"CRAN release: 2023-04-24","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"improvements-6-0-2","dir":"Changelog","previous_headings":"","what":"Improvements","title":"hdnom 6.0.2","text":"Use samples instead much smaller set samples code examples temporary fix reverse dependency check errors result null model. proper fix involve updating logic use ncvsurv() pathwise manner instead single value lambda.","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"hdnom-601","dir":"Changelog","previous_headings":"","what":"hdnom 6.0.1","title":"hdnom 6.0.1","text":"CRAN release: 2022-05-18","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"improvements-6-0-1","dir":"Changelog","previous_headings":"","what":"Improvements","title":"hdnom 6.0.1","text":"Removed dependency survAUC. Ported essential C code computing time-dependent AUC fixed build issues r-devel.","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"hdnom-600","dir":"Changelog","previous_headings":"","what":"hdnom 6.0.0","title":"hdnom 6.0.0","text":"CRAN release: 2019-06-23 version major refactor package, several technical adjustments improve functional interface, code structure, execution performance. result, critical API-breaking changes made. Please update previous code calls hdnom accordingly. detailed changes, please check updated items .","code":""},{"path":[]},{"path":"https://nanx.me/hdnom/news/index.html","id":"general-6-0-0","dir":"Changelog","previous_headings":"Improvements","what":"General","title":"hdnom 6.0.0","text":"Renamed exported functions. exported function renamed meaningful succinct. example, hdcox.*() renamed fit_*(), hdnom.nomogram() renamed as_nomogram(), hdnom.validate() renamed validate(), . Removed dependency rms, reusing minimal set code rms nomogram construction plotting. results clearer code structure, better maintainability, faster package installation/loading speed. Also removed non-essential package dependencies. first argument print functions now returned invisbily, make easier use pipe.","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"model-fitting-6-0-0","dir":"Changelog","previous_headings":"Improvements","what":"Model Fitting","title":"hdnom 6.0.0","text":"components model fitting function returns now unified across model types. example, model object can accessed fit$model, selected ‚Äúoptimal‚Äù hyperparameters can accessed fit$lambda. model type now stored explicitly fit$type.","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"nomograms-6-0-0","dir":"Changelog","previous_headings":"Improvements","what":"Nomograms","title":"hdnom 6.0.0","text":"as_nomogram (previously hdnom.nomogram()) now accepts fitted model objects directly instead $model component. now recognize model type automatically, thus previous arguments model.type deprecated. easier chain function calls together using magrittr. as_nomogram, previous ddist argument needed anymore removed. also need set datadist object global options variable (required rms user flow). new nomogram implementation prints plots nomogram penalized regression models directly. supersedes old implementation, fits OLS model regress linear predictors set predictors selected penalized Cox regression model, aiming approximate penalized model. numerical visual difference minimal, though.","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"visualizations-6-0-0","dir":"Changelog","previous_headings":"Improvements","what":"Visualizations","title":"hdnom 6.0.0","text":"Add new ggplot2 theme theme_hdnom() applies validation, calibration, comparison plots consistent, cleaner look across plots within package.","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"hdnom-50-2018-05-13","dir":"Changelog","previous_headings":"","what":"hdnom 5.0 (2018-05-13)","title":"hdnom 5.0 (2018-05-13)","text":"CRAN release: 2018-05-14","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"improvements-5-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"hdnom 5.0 (2018-05-13)","text":"Exported survival curve prediction functions (glmnet.survcurve(), ncvreg.survcurve(), penalized.survcurve()) Breslow baseline hazard estimator functions (glmnet.basesurv(), ncvreg.basesurv(), penalized.basesurv()). New URL documentation website: https://nanx./hdnom/.","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"hdnom-49-2017-09-28","dir":"Changelog","previous_headings":"","what":"hdnom 4.9 (2017-09-28)","title":"hdnom 4.9 (2017-09-28)","text":"CRAN release: 2017-09-29","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"improvements-4-9","dir":"Changelog","previous_headings":"","what":"Improvements","title":"hdnom 4.9 (2017-09-28)","text":"Use system font stack instead Google Fonts vignettes avoid pandoc SSL issue.","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"hdnom-48-2017-03-25","dir":"Changelog","previous_headings":"","what":"hdnom 4.8 (2017-03-25)","title":"hdnom 4.8 (2017-03-25)","text":"CRAN release: 2017-03-25","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"improvements-4-8","dir":"Changelog","previous_headings":"","what":"Improvements","title":"hdnom 4.8 (2017-03-25)","text":"Reduced example running time less 10s hdnom.calibrate().","code":""},{"path":[]},{"path":"https://nanx.me/hdnom/news/index.html","id":"improvements-4-7","dir":"Changelog","previous_headings":"","what":"Improvements","title":"hdnom 4.7 (2017-03-24)","text":"Better code indentation style. Reduced example running time fused lasso. Updated gallery images README.md. HTTPS enabled website.","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"hdnom-46-2017-01-07","dir":"Changelog","previous_headings":"","what":"hdnom 4.6 (2017-01-07)","title":"hdnom 4.6 (2017-01-07)","text":"CRAN release: 2017-01-08","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"bug-fixes-4-6","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"hdnom 4.6 (2017-01-07)","text":"Fixed issues parameter tuning cross-validation procedures fused lasso models (afc49c9). user-visible change two parameters lambda1 lambda2 instead single ‚Äúlambda‚Äù now required fit, validate, calibrate fused lasso models.","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"improvements-4-6","dir":"Changelog","previous_headings":"","what":"Improvements","title":"hdnom 4.6 (2017-01-07)","text":"argument lambda hdnom.nomogram longer needed deprecated. Allow users specify eps max.iter MCP SCAD penalty related models. Setting default values 1e-4 10000, consistent ncvreg 3.8-0.","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"hdnom-45-2016-12-24","dir":"Changelog","previous_headings":"","what":"hdnom 4.5 (2016-12-24)","title":"hdnom 4.5 (2016-12-24)","text":"CRAN release: 2016-12-25","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"bug-fixes-4-5","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"hdnom 4.5 (2016-12-24)","text":"Fixed vanishing axis problem Kaplan-Meier plot hdnom.kmplot() ggplot2 2.2.0, caused previous workaround bug introduced ggplot2 2.1.0. Fixed potential convergence issues examples ncvreg >= 3.7-0 new convergence criterion, increasing max.iter ncvsurv substantially higher value (5e+4). Fixed single lambda support issues ncvsurv ncvreg >= 3.7-0.","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"improvements-4-5","dir":"Changelog","previous_headings":"","what":"Improvements","title":"hdnom 4.5 (2016-12-24)","text":"Added Windows continuous integration using AppVeyor. New website design project website: consistent web application.","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"hdnom-40-2016-07-05","dir":"Changelog","previous_headings":"","what":"hdnom 4.0 (2016-07-05)","title":"hdnom 4.0 (2016-07-05)","text":"CRAN release: 2016-07-05","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"improvements-4-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"hdnom 4.0 (2016-07-05)","text":"concrete examples several functions. Introduce argument ylim plot.hdnom.validate(), plot.hdnom.external.validate(), plot.hdnom.compare.validate() (#4).","code":""},{"path":[]},{"path":"https://nanx.me/hdnom/news/index.html","id":"bug-fixes-3-7","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"hdnom 3.7 (2016-03-25)","text":"Removed one redundant color lancet color palette.","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"hdnom-36-2016-03-24","dir":"Changelog","previous_headings":"","what":"hdnom 3.6 (2016-03-24)","title":"hdnom 3.6 (2016-03-24)","text":"CRAN release: 2016-03-25","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"new-features-3-6","dir":"Changelog","previous_headings":"","what":"New Features","title":"hdnom 3.6 (2016-03-24)","text":"Added 4 new color palettes (JCO, Lancet, NPG, AAAS) plots. See vignette details.","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"bug-fixes-3-6","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"hdnom 3.6 (2016-03-24)","text":"Fixed vanishing axis problem Kaplan-Meier plot due ggplot2 2.1.0 update.","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"improvements-3-6","dir":"Changelog","previous_headings":"","what":"Improvements","title":"hdnom 3.6 (2016-03-24)","text":"New CSS style HTML vignette.","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"hdnom-30-2016-01-03","dir":"Changelog","previous_headings":"","what":"hdnom 3.0 (2016-01-03)","title":"hdnom 3.0 (2016-01-03)","text":"CRAN release: 2016-01-04","code":""},{"path":[]},{"path":"https://nanx.me/hdnom/news/index.html","id":"package-3-0","dir":"Changelog","previous_headings":"New Features","what":"Package","title":"hdnom 3.0 (2016-01-03)","text":"New function hdnom.compare.validate() model comparison validation New function hdnom.compare.calibrate() model comparison calibration New function hdnom.external.validate() external validation New function hdnom.external.calibrate() external calibration New predict print methods hdcox.model objects New function hdnom.kmplot(): Kaplan-Meier analysis risk groups using internal/external calibration results New function hdnom.logrank(): Log-rank test risk groups using internal/external calibration results","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"web-application-3-0","dir":"Changelog","previous_headings":"New Features","what":"Web Application","title":"hdnom 3.0 (2016-01-03)","text":"web application substantially improved reflect new features Record random seeds generated reports improve reproducibility Allow users download model objects exploration R","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"improvements-3-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"hdnom 3.0 (2016-01-03)","text":"Improvements random seed handling internal validation calibration vignette extended reflect new features","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"bug-fixes-3-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"hdnom 3.0 (2016-01-03)","text":"Fixed error internal calibration mistakenly used testing data use training data computation","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"hdnom-21-2015-10-26","dir":"Changelog","previous_headings":"","what":"hdnom 2.1 (2015-10-26)","title":"hdnom 2.1 (2015-10-26)","text":"CRAN release: 2015-10-27","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"new-features-2-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"hdnom 2.1 (2015-10-26)","text":"New documentation website. New Shiny web application.","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"improvements-2-1","dir":"Changelog","previous_headings":"","what":"Improvements","title":"hdnom 2.1 (2015-10-26)","text":"Added exception handling null models hdcox.*() functions. Make examples compatible ncvreg 3.5-0, refined CV implementation survival models improved computation speed.","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"hdnom-20-2015-09-15","dir":"Changelog","previous_headings":"","what":"hdnom 2.0 (2015-09-15)","title":"hdnom 2.0 (2015-09-15)","text":"CRAN release: 2015-09-16","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"new-features-2-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"hdnom 2.0 (2015-09-15)","text":"Support five high-dimensional penalized Cox model types: Fused lasso MCP Mnet SCAD Snet","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"hdnom-12-2015-08-27","dir":"Changelog","previous_headings":"","what":"hdnom 1.2 (2015-08-27)","title":"hdnom 1.2 (2015-08-27)","text":"CRAN release: 2015-08-28","code":""},{"path":"https://nanx.me/hdnom/news/index.html","id":"improvements-1-2","dir":"Changelog","previous_headings":"","what":"Improvements","title":"hdnom 1.2 (2015-08-27)","text":"Reduced example running time hdnom.validate(), hdnom.calibrate(), hdcox.aenet(), hdcox.enet() reducing resampling times.","code":""},{"path":[]},{"path":"https://nanx.me/hdnom/news/index.html","id":"bug-fixes-1-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"hdnom 1.1 (2015-08-27)","text":"Added argument parallel hdcox.aenet() hdcox.enet() enable disable use parallel parameter tuning.","code":""},{"path":[]},{"path":"https://nanx.me/hdnom/news/index.html","id":"new-features-1-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"hdnom 1.0 (2015-08-04)","text":"Initial version Nomograms glmnet models Validation glmnet models Calibration glmnet models","code":""}]
